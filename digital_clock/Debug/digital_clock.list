
digital_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b5c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000161c  08003c68  08003c68  00004c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005284  08005284  0000706c  2**0
                  CONTENTS
  4 .ARM          00000000  08005284  08005284  0000706c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005284  08005284  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005284  08005284  00006284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005288  08005288  00006288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800528c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000006c  080052f8  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  080052f8  0000726c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080da  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f75  00000000  00000000  0000f16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  000110e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00017cb2  00000000  00000000  000119f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000b086  00000000  00000000  000296aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008454f  00000000  00000000  00034730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000b8c7f  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000006a5  00000000  00000000  000b8cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002800  00000000  00000000  000b9368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000bbb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c50 	.word	0x08003c50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08003c50 	.word	0x08003c50

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	@ 0x30
 8000150:	af04      	add	r7, sp, #16
	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 8000152:	f000 ff9b 	bl	800108c <HAL_Init>

	  /* Configure the system clock */
	  SystemClock_Config();
 8000156:	f000 fac9 	bl	80006ec <SystemClock_Config>

	  /* Initialize all configured peripherals */
	  /* SPI*/
	  MX_GPIO_Init();
 800015a:	f000 fba5 	bl	80008a8 <MX_GPIO_Init>
	  MX_RTC_Init();
 800015e:	f000 fb23 	bl	80007a8 <MX_RTC_Init>
	  MX_SPI1_Init();
 8000162:	f000 fb6b 	bl	800083c <MX_SPI1_Init>
	  /* TFT Display*/
	  ST7735_Init();
 8000166:	f000 fcdd 	bl	8000b24 <ST7735_Init>



	  /** RTC backup data register*/
	  time.Hours   = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 800016a:	2101      	movs	r1, #1
 800016c:	48ab      	ldr	r0, [pc, #684]	@ (800041c <main+0x2d0>)
 800016e:	f002 fe25 	bl	8002dbc <HAL_RTCEx_BKUPRead>
 8000172:	4603      	mov	r3, r0
 8000174:	b2da      	uxtb	r2, r3
 8000176:	4baa      	ldr	r3, [pc, #680]	@ (8000420 <main+0x2d4>)
 8000178:	701a      	strb	r2, [r3, #0]
	  time.Minutes = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 800017a:	2102      	movs	r1, #2
 800017c:	48a7      	ldr	r0, [pc, #668]	@ (800041c <main+0x2d0>)
 800017e:	f002 fe1d 	bl	8002dbc <HAL_RTCEx_BKUPRead>
 8000182:	4603      	mov	r3, r0
 8000184:	b2da      	uxtb	r2, r3
 8000186:	4ba6      	ldr	r3, [pc, #664]	@ (8000420 <main+0x2d4>)
 8000188:	705a      	strb	r2, [r3, #1]
	  time.Seconds = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3);
 800018a:	2103      	movs	r1, #3
 800018c:	48a3      	ldr	r0, [pc, #652]	@ (800041c <main+0x2d0>)
 800018e:	f002 fe15 	bl	8002dbc <HAL_RTCEx_BKUPRead>
 8000192:	4603      	mov	r3, r0
 8000194:	b2da      	uxtb	r2, r3
 8000196:	4ba2      	ldr	r3, [pc, #648]	@ (8000420 <main+0x2d4>)
 8000198:	709a      	strb	r2, [r3, #2]
	  HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800019a:	2200      	movs	r2, #0
 800019c:	49a0      	ldr	r1, [pc, #640]	@ (8000420 <main+0x2d4>)
 800019e:	489f      	ldr	r0, [pc, #636]	@ (800041c <main+0x2d0>)
 80001a0:	f002 f8a4 	bl	80022ec <HAL_RTC_SetTime>


	  date.Year    = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4);
 80001a4:	2104      	movs	r1, #4
 80001a6:	489d      	ldr	r0, [pc, #628]	@ (800041c <main+0x2d0>)
 80001a8:	f002 fe08 	bl	8002dbc <HAL_RTCEx_BKUPRead>
 80001ac:	4603      	mov	r3, r0
 80001ae:	b2da      	uxtb	r2, r3
 80001b0:	4b9c      	ldr	r3, [pc, #624]	@ (8000424 <main+0x2d8>)
 80001b2:	70da      	strb	r2, [r3, #3]
	  date.Month   = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5);
 80001b4:	2105      	movs	r1, #5
 80001b6:	4899      	ldr	r0, [pc, #612]	@ (800041c <main+0x2d0>)
 80001b8:	f002 fe00 	bl	8002dbc <HAL_RTCEx_BKUPRead>
 80001bc:	4603      	mov	r3, r0
 80001be:	b2da      	uxtb	r2, r3
 80001c0:	4b98      	ldr	r3, [pc, #608]	@ (8000424 <main+0x2d8>)
 80001c2:	705a      	strb	r2, [r3, #1]
	  date.Date    = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6);
 80001c4:	2106      	movs	r1, #6
 80001c6:	4895      	ldr	r0, [pc, #596]	@ (800041c <main+0x2d0>)
 80001c8:	f002 fdf8 	bl	8002dbc <HAL_RTCEx_BKUPRead>
 80001cc:	4603      	mov	r3, r0
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	4b94      	ldr	r3, [pc, #592]	@ (8000424 <main+0x2d8>)
 80001d2:	709a      	strb	r2, [r3, #2]
	  date.WeekDay = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR7);
 80001d4:	2107      	movs	r1, #7
 80001d6:	4891      	ldr	r0, [pc, #580]	@ (800041c <main+0x2d0>)
 80001d8:	f002 fdf0 	bl	8002dbc <HAL_RTCEx_BKUPRead>
 80001dc:	4603      	mov	r3, r0
 80001de:	b2da      	uxtb	r2, r3
 80001e0:	4b90      	ldr	r3, [pc, #576]	@ (8000424 <main+0x2d8>)
 80001e2:	701a      	strb	r2, [r3, #0]
	  HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80001e4:	2200      	movs	r2, #0
 80001e6:	498f      	ldr	r1, [pc, #572]	@ (8000424 <main+0x2d8>)
 80001e8:	488c      	ldr	r0, [pc, #560]	@ (800041c <main+0x2d0>)
 80001ea:	f002 f9ef 	bl	80025cc <HAL_RTC_SetDate>


	  char date_arr[3], year_arr[5], month_arr[4], day_arr[10];


	  ST7735_FillScreenFast(ST7735_BLUE);
 80001ee:	201f      	movs	r0, #31
 80001f0:	f000 fdfa 	bl	8000de8 <ST7735_FillScreenFast>
	  ST7735_WriteString(20, 10, "Digital Clock", Font_7x10, ST7735_YELLOW, ST7735_BLUE);
 80001f4:	4b8c      	ldr	r3, [pc, #560]	@ (8000428 <main+0x2dc>)
 80001f6:	221f      	movs	r2, #31
 80001f8:	9202      	str	r2, [sp, #8]
 80001fa:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80001fe:	9201      	str	r2, [sp, #4]
 8000200:	685a      	ldr	r2, [r3, #4]
 8000202:	9200      	str	r2, [sp, #0]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a89      	ldr	r2, [pc, #548]	@ (800042c <main+0x2e0>)
 8000208:	210a      	movs	r1, #10
 800020a:	2014      	movs	r0, #20
 800020c:	f000 fd1b 	bl	8000c46 <ST7735_WriteString>

	  /* Infinite loop */
	  /* BEGIN WHILE */


	  uint8_t day   = date.WeekDay;
 8000210:	4b84      	ldr	r3, [pc, #528]	@ (8000424 <main+0x2d8>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	77fb      	strb	r3, [r7, #31]
	  uint8_t month = date.Month;
 8000216:	4b83      	ldr	r3, [pc, #524]	@ (8000424 <main+0x2d8>)
 8000218:	785b      	ldrb	r3, [r3, #1]
 800021a:	77bb      	strb	r3, [r7, #30]

	  switch(date.Month){
 800021c:	4b81      	ldr	r3, [pc, #516]	@ (8000424 <main+0x2d8>)
 800021e:	785b      	ldrb	r3, [r3, #1]
 8000220:	3b01      	subs	r3, #1
 8000222:	2b11      	cmp	r3, #17
 8000224:	d84a      	bhi.n	80002bc <main+0x170>
 8000226:	a201      	add	r2, pc, #4	@ (adr r2, 800022c <main+0xe0>)
 8000228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800022c:	08000275 	.word	0x08000275
 8000230:	0800027b 	.word	0x0800027b
 8000234:	08000281 	.word	0x08000281
 8000238:	08000287 	.word	0x08000287
 800023c:	0800028d 	.word	0x0800028d
 8000240:	08000293 	.word	0x08000293
 8000244:	08000299 	.word	0x08000299
 8000248:	0800029f 	.word	0x0800029f
 800024c:	080002a5 	.word	0x080002a5
 8000250:	080002bd 	.word	0x080002bd
 8000254:	080002bd 	.word	0x080002bd
 8000258:	080002bd 	.word	0x080002bd
 800025c:	080002bd 	.word	0x080002bd
 8000260:	080002bd 	.word	0x080002bd
 8000264:	080002bd 	.word	0x080002bd
 8000268:	080002ab 	.word	0x080002ab
 800026c:	080002b1 	.word	0x080002b1
 8000270:	080002b7 	.word	0x080002b7
	  		case RTC_MONTH_JANUARY:   strcpy(month_arr, "Jan\0"); break;
 8000274:	4b6e      	ldr	r3, [pc, #440]	@ (8000430 <main+0x2e4>)
 8000276:	60fb      	str	r3, [r7, #12]
 8000278:	e020      	b.n	80002bc <main+0x170>
	  		case RTC_MONTH_FEBRUARY:  strcpy(month_arr, "Feb\0"); break;
 800027a:	4b6e      	ldr	r3, [pc, #440]	@ (8000434 <main+0x2e8>)
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	e01d      	b.n	80002bc <main+0x170>
	  		case RTC_MONTH_MARCH:     strcpy(month_arr, "Mar\0"); break;
 8000280:	4b6d      	ldr	r3, [pc, #436]	@ (8000438 <main+0x2ec>)
 8000282:	60fb      	str	r3, [r7, #12]
 8000284:	e01a      	b.n	80002bc <main+0x170>
	  		case RTC_MONTH_APRIL:     strcpy(month_arr, "Apr\0"); break;
 8000286:	4b6d      	ldr	r3, [pc, #436]	@ (800043c <main+0x2f0>)
 8000288:	60fb      	str	r3, [r7, #12]
 800028a:	e017      	b.n	80002bc <main+0x170>
	  		case RTC_MONTH_MAY:       strcpy(month_arr, "May\0"); break;
 800028c:	4b6c      	ldr	r3, [pc, #432]	@ (8000440 <main+0x2f4>)
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e014      	b.n	80002bc <main+0x170>
	  		case RTC_MONTH_JUNE:      strcpy(month_arr, "Jun\0"); break;
 8000292:	4b6c      	ldr	r3, [pc, #432]	@ (8000444 <main+0x2f8>)
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	e011      	b.n	80002bc <main+0x170>
	  		case RTC_MONTH_JULY:      strcpy(month_arr, "Jul\0"); break;
 8000298:	4b6b      	ldr	r3, [pc, #428]	@ (8000448 <main+0x2fc>)
 800029a:	60fb      	str	r3, [r7, #12]
 800029c:	e00e      	b.n	80002bc <main+0x170>
	  		case RTC_MONTH_AUGUST:    strcpy(month_arr, "Aug\0"); break;
 800029e:	4b6b      	ldr	r3, [pc, #428]	@ (800044c <main+0x300>)
 80002a0:	60fb      	str	r3, [r7, #12]
 80002a2:	e00b      	b.n	80002bc <main+0x170>
	  		case RTC_MONTH_SEPTEMBER: strcpy(month_arr, "Sep\0"); break;
 80002a4:	4b6a      	ldr	r3, [pc, #424]	@ (8000450 <main+0x304>)
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e008      	b.n	80002bc <main+0x170>
	  		case RTC_MONTH_OCTOBER:   strcpy(month_arr, "Oct\0"); break;
 80002aa:	4b6a      	ldr	r3, [pc, #424]	@ (8000454 <main+0x308>)
 80002ac:	60fb      	str	r3, [r7, #12]
 80002ae:	e005      	b.n	80002bc <main+0x170>
	  		case RTC_MONTH_NOVEMBER:  strcpy(month_arr, "Nov\0"); break;
 80002b0:	4b69      	ldr	r3, [pc, #420]	@ (8000458 <main+0x30c>)
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	e002      	b.n	80002bc <main+0x170>
	  		case RTC_MONTH_DECEMBER:  strcpy(month_arr, "Dec\0"); break;
 80002b6:	4b69      	ldr	r3, [pc, #420]	@ (800045c <main+0x310>)
 80002b8:	60fb      	str	r3, [r7, #12]
 80002ba:	bf00      	nop
	  	}
	  switch(day){
 80002bc:	7ffb      	ldrb	r3, [r7, #31]
 80002be:	2b06      	cmp	r3, #6
 80002c0:	d84a      	bhi.n	8000358 <main+0x20c>
 80002c2:	a201      	add	r2, pc, #4	@ (adr r2, 80002c8 <main+0x17c>)
 80002c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c8:	08000307 	.word	0x08000307
 80002cc:	0800031d 	.word	0x0800031d
 80002d0:	08000333 	.word	0x08000333
 80002d4:	08000341 	.word	0x08000341
 80002d8:	0800034d 	.word	0x0800034d
 80002dc:	080002e5 	.word	0x080002e5
 80002e0:	080002fb 	.word	0x080002fb
	  		case RTC_WEEKDAY_FRIDAY:    strcpy(day_arr, "Friday\0"); break;
 80002e4:	463b      	mov	r3, r7
 80002e6:	4a5e      	ldr	r2, [pc, #376]	@ (8000460 <main+0x314>)
 80002e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002ec:	6018      	str	r0, [r3, #0]
 80002ee:	3304      	adds	r3, #4
 80002f0:	8019      	strh	r1, [r3, #0]
 80002f2:	3302      	adds	r3, #2
 80002f4:	0c0a      	lsrs	r2, r1, #16
 80002f6:	701a      	strb	r2, [r3, #0]
 80002f8:	e02e      	b.n	8000358 <main+0x20c>
	  		case RTC_WEEKDAY_SATURDAY:  strcpy(day_arr, "Saturday\0"); break;
 80002fa:	463b      	mov	r3, r7
 80002fc:	4a59      	ldr	r2, [pc, #356]	@ (8000464 <main+0x318>)
 80002fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000300:	c303      	stmia	r3!, {r0, r1}
 8000302:	701a      	strb	r2, [r3, #0]
 8000304:	e028      	b.n	8000358 <main+0x20c>
	  		case RTC_WEEKDAY_SUNDAY:    strcpy(day_arr, "Sunday\0"); break;
 8000306:	463b      	mov	r3, r7
 8000308:	4a57      	ldr	r2, [pc, #348]	@ (8000468 <main+0x31c>)
 800030a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800030e:	6018      	str	r0, [r3, #0]
 8000310:	3304      	adds	r3, #4
 8000312:	8019      	strh	r1, [r3, #0]
 8000314:	3302      	adds	r3, #2
 8000316:	0c0a      	lsrs	r2, r1, #16
 8000318:	701a      	strb	r2, [r3, #0]
 800031a:	e01d      	b.n	8000358 <main+0x20c>
	  		case RTC_WEEKDAY_MONDAY:    strcpy(day_arr, "Monday\0"); break;
 800031c:	463b      	mov	r3, r7
 800031e:	4a53      	ldr	r2, [pc, #332]	@ (800046c <main+0x320>)
 8000320:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000324:	6018      	str	r0, [r3, #0]
 8000326:	3304      	adds	r3, #4
 8000328:	8019      	strh	r1, [r3, #0]
 800032a:	3302      	adds	r3, #2
 800032c:	0c0a      	lsrs	r2, r1, #16
 800032e:	701a      	strb	r2, [r3, #0]
 8000330:	e012      	b.n	8000358 <main+0x20c>
	  		case RTC_WEEKDAY_TUESDAY:   strcpy(day_arr, "Tuesday\0"); break;
 8000332:	463b      	mov	r3, r7
 8000334:	4a4e      	ldr	r2, [pc, #312]	@ (8000470 <main+0x324>)
 8000336:	e892 0003 	ldmia.w	r2, {r0, r1}
 800033a:	e883 0003 	stmia.w	r3, {r0, r1}
 800033e:	e00b      	b.n	8000358 <main+0x20c>
	  		case RTC_WEEKDAY_WEDNESDAY: strcpy(day_arr, "Wednesday\0"); break;
 8000340:	4a4c      	ldr	r2, [pc, #304]	@ (8000474 <main+0x328>)
 8000342:	463b      	mov	r3, r7
 8000344:	ca07      	ldmia	r2, {r0, r1, r2}
 8000346:	c303      	stmia	r3!, {r0, r1}
 8000348:	801a      	strh	r2, [r3, #0]
 800034a:	e005      	b.n	8000358 <main+0x20c>
	  		case RTC_WEEKDAY_THURSDAY:  strcpy(day_arr, "Thursday\0"); break;
 800034c:	463b      	mov	r3, r7
 800034e:	4a4a      	ldr	r2, [pc, #296]	@ (8000478 <main+0x32c>)
 8000350:	ca07      	ldmia	r2, {r0, r1, r2}
 8000352:	c303      	stmia	r3!, {r0, r1}
 8000354:	701a      	strb	r2, [r3, #0]
 8000356:	bf00      	nop


	  while (1)
	  {

		  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000358:	2200      	movs	r2, #0
 800035a:	4931      	ldr	r1, [pc, #196]	@ (8000420 <main+0x2d4>)
 800035c:	482f      	ldr	r0, [pc, #188]	@ (800041c <main+0x2d0>)
 800035e:	f002 f85d 	bl	800241c <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000362:	2200      	movs	r2, #0
 8000364:	492f      	ldr	r1, [pc, #188]	@ (8000424 <main+0x2d8>)
 8000366:	482d      	ldr	r0, [pc, #180]	@ (800041c <main+0x2d0>)
 8000368:	f002 f9e6 	bl	8002738 <HAL_RTC_GetDate>


		  /** Month*/
		  if(month != date.Month){
 800036c:	4b2d      	ldr	r3, [pc, #180]	@ (8000424 <main+0x2d8>)
 800036e:	785b      	ldrb	r3, [r3, #1]
 8000370:	7fba      	ldrb	r2, [r7, #30]
 8000372:	429a      	cmp	r2, r3
 8000374:	f000 8085 	beq.w	8000482 <main+0x336>
			  month = date.Month;
 8000378:	4b2a      	ldr	r3, [pc, #168]	@ (8000424 <main+0x2d8>)
 800037a:	785b      	ldrb	r3, [r3, #1]
 800037c:	77bb      	strb	r3, [r7, #30]
			  switch(date.Month){
 800037e:	4b29      	ldr	r3, [pc, #164]	@ (8000424 <main+0x2d8>)
 8000380:	785b      	ldrb	r3, [r3, #1]
 8000382:	3b01      	subs	r3, #1
 8000384:	2b11      	cmp	r3, #17
 8000386:	d87c      	bhi.n	8000482 <main+0x336>
 8000388:	a201      	add	r2, pc, #4	@ (adr r2, 8000390 <main+0x244>)
 800038a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800038e:	bf00      	nop
 8000390:	080003d9 	.word	0x080003d9
 8000394:	080003df 	.word	0x080003df
 8000398:	080003e5 	.word	0x080003e5
 800039c:	080003eb 	.word	0x080003eb
 80003a0:	080003f1 	.word	0x080003f1
 80003a4:	080003f7 	.word	0x080003f7
 80003a8:	080003fd 	.word	0x080003fd
 80003ac:	08000403 	.word	0x08000403
 80003b0:	08000409 	.word	0x08000409
 80003b4:	08000483 	.word	0x08000483
 80003b8:	08000483 	.word	0x08000483
 80003bc:	08000483 	.word	0x08000483
 80003c0:	08000483 	.word	0x08000483
 80003c4:	08000483 	.word	0x08000483
 80003c8:	08000483 	.word	0x08000483
 80003cc:	0800040f 	.word	0x0800040f
 80003d0:	08000415 	.word	0x08000415
 80003d4:	0800047d 	.word	0x0800047d
			  	  case RTC_MONTH_JANUARY:   strcpy(month_arr, "Jan\0"); break;
 80003d8:	4b15      	ldr	r3, [pc, #84]	@ (8000430 <main+0x2e4>)
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	e051      	b.n	8000482 <main+0x336>
			  	  case RTC_MONTH_FEBRUARY:  strcpy(month_arr, "Feb\0"); break;
 80003de:	4b15      	ldr	r3, [pc, #84]	@ (8000434 <main+0x2e8>)
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	e04e      	b.n	8000482 <main+0x336>
			  	  case RTC_MONTH_MARCH:     strcpy(month_arr, "Mar\0"); break;
 80003e4:	4b14      	ldr	r3, [pc, #80]	@ (8000438 <main+0x2ec>)
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	e04b      	b.n	8000482 <main+0x336>
			  	  case RTC_MONTH_APRIL:     strcpy(month_arr, "Apr\0"); break;
 80003ea:	4b14      	ldr	r3, [pc, #80]	@ (800043c <main+0x2f0>)
 80003ec:	60fb      	str	r3, [r7, #12]
 80003ee:	e048      	b.n	8000482 <main+0x336>
			  	  case RTC_MONTH_MAY:       strcpy(month_arr, "May\0"); break;
 80003f0:	4b13      	ldr	r3, [pc, #76]	@ (8000440 <main+0x2f4>)
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	e045      	b.n	8000482 <main+0x336>
			  	  case RTC_MONTH_JUNE:      strcpy(month_arr, "Jun\0"); break;
 80003f6:	4b13      	ldr	r3, [pc, #76]	@ (8000444 <main+0x2f8>)
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	e042      	b.n	8000482 <main+0x336>
			  	  case RTC_MONTH_JULY:      strcpy(month_arr, "Jul\0"); break;
 80003fc:	4b12      	ldr	r3, [pc, #72]	@ (8000448 <main+0x2fc>)
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	e03f      	b.n	8000482 <main+0x336>
			  	  case RTC_MONTH_AUGUST:    strcpy(month_arr, "Aug\0"); break;
 8000402:	4b12      	ldr	r3, [pc, #72]	@ (800044c <main+0x300>)
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	e03c      	b.n	8000482 <main+0x336>
			  	  case RTC_MONTH_SEPTEMBER: strcpy(month_arr, "Sep\0"); break;
 8000408:	4b11      	ldr	r3, [pc, #68]	@ (8000450 <main+0x304>)
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	e039      	b.n	8000482 <main+0x336>
			  	  case RTC_MONTH_OCTOBER:   strcpy(month_arr, "Oct\0"); break;
 800040e:	4b11      	ldr	r3, [pc, #68]	@ (8000454 <main+0x308>)
 8000410:	60fb      	str	r3, [r7, #12]
 8000412:	e036      	b.n	8000482 <main+0x336>
			  	  case RTC_MONTH_NOVEMBER:  strcpy(month_arr, "Nov\0"); break;
 8000414:	4b10      	ldr	r3, [pc, #64]	@ (8000458 <main+0x30c>)
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	e033      	b.n	8000482 <main+0x336>
 800041a:	bf00      	nop
 800041c:	20000088 	.word	0x20000088
 8000420:	200000f4 	.word	0x200000f4
 8000424:	200000f8 	.word	0x200000f8
 8000428:	20000000 	.word	0x20000000
 800042c:	08003c68 	.word	0x08003c68
 8000430:	006e614a 	.word	0x006e614a
 8000434:	00626546 	.word	0x00626546
 8000438:	0072614d 	.word	0x0072614d
 800043c:	00727041 	.word	0x00727041
 8000440:	0079614d 	.word	0x0079614d
 8000444:	006e754a 	.word	0x006e754a
 8000448:	006c754a 	.word	0x006c754a
 800044c:	00677541 	.word	0x00677541
 8000450:	00706553 	.word	0x00706553
 8000454:	0074634f 	.word	0x0074634f
 8000458:	00766f4e 	.word	0x00766f4e
 800045c:	00636544 	.word	0x00636544
 8000460:	08003c78 	.word	0x08003c78
 8000464:	08003c80 	.word	0x08003c80
 8000468:	08003c8c 	.word	0x08003c8c
 800046c:	08003c94 	.word	0x08003c94
 8000470:	08003c9c 	.word	0x08003c9c
 8000474:	08003ca8 	.word	0x08003ca8
 8000478:	08003cb4 	.word	0x08003cb4
			  	  case RTC_MONTH_DECEMBER:  strcpy(month_arr, "Dec\0"); break;
 800047c:	4b8c      	ldr	r3, [pc, #560]	@ (80006b0 <main+0x564>)
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	bf00      	nop
			  }

		  }
		  /** Day*/
		  if(day != date.WeekDay){
 8000482:	4b8c      	ldr	r3, [pc, #560]	@ (80006b4 <main+0x568>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	7ffa      	ldrb	r2, [r7, #31]
 8000488:	429a      	cmp	r2, r3
 800048a:	d04a      	beq.n	8000522 <main+0x3d6>
			  day = date.WeekDay;
 800048c:	4b89      	ldr	r3, [pc, #548]	@ (80006b4 <main+0x568>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	77fb      	strb	r3, [r7, #31]
			  switch(day){
 8000492:	7ffb      	ldrb	r3, [r7, #31]
 8000494:	2b06      	cmp	r3, #6
 8000496:	d844      	bhi.n	8000522 <main+0x3d6>
 8000498:	a201      	add	r2, pc, #4	@ (adr r2, 80004a0 <main+0x354>)
 800049a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800049e:	bf00      	nop
 80004a0:	080004df 	.word	0x080004df
 80004a4:	080004f5 	.word	0x080004f5
 80004a8:	080004fd 	.word	0x080004fd
 80004ac:	0800050b 	.word	0x0800050b
 80004b0:	08000517 	.word	0x08000517
 80004b4:	080004bd 	.word	0x080004bd
 80004b8:	080004d3 	.word	0x080004d3
			  	  case RTC_WEEKDAY_FRIDAY:    strcpy(day_arr, "Friday\0"); break;
 80004bc:	463b      	mov	r3, r7
 80004be:	4a7e      	ldr	r2, [pc, #504]	@ (80006b8 <main+0x56c>)
 80004c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004c4:	6018      	str	r0, [r3, #0]
 80004c6:	3304      	adds	r3, #4
 80004c8:	8019      	strh	r1, [r3, #0]
 80004ca:	3302      	adds	r3, #2
 80004cc:	0c0a      	lsrs	r2, r1, #16
 80004ce:	701a      	strb	r2, [r3, #0]
 80004d0:	e027      	b.n	8000522 <main+0x3d6>
			  	  case RTC_WEEKDAY_SATURDAY:  strcpy(day_arr, "Saturday\0"); break;
 80004d2:	463b      	mov	r3, r7
 80004d4:	4a79      	ldr	r2, [pc, #484]	@ (80006bc <main+0x570>)
 80004d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80004d8:	c303      	stmia	r3!, {r0, r1}
 80004da:	701a      	strb	r2, [r3, #0]
 80004dc:	e021      	b.n	8000522 <main+0x3d6>
			  	  case RTC_WEEKDAY_SUNDAY:    strcpy(day_arr, "Sunday\0"); break;
 80004de:	463b      	mov	r3, r7
 80004e0:	4a77      	ldr	r2, [pc, #476]	@ (80006c0 <main+0x574>)
 80004e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004e6:	6018      	str	r0, [r3, #0]
 80004e8:	3304      	adds	r3, #4
 80004ea:	8019      	strh	r1, [r3, #0]
 80004ec:	3302      	adds	r3, #2
 80004ee:	0c0a      	lsrs	r2, r1, #16
 80004f0:	701a      	strb	r2, [r3, #0]
 80004f2:	e016      	b.n	8000522 <main+0x3d6>
			  	  case RTC_WEEKDAY_MONDAY:    strcpy(day_arr, "Mon\0"); break;
 80004f4:	463b      	mov	r3, r7
 80004f6:	4a73      	ldr	r2, [pc, #460]	@ (80006c4 <main+0x578>)
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	e012      	b.n	8000522 <main+0x3d6>
			  	  case RTC_WEEKDAY_TUESDAY:   strcpy(day_arr, "Tuesday\0"); break;
 80004fc:	463b      	mov	r3, r7
 80004fe:	4a72      	ldr	r2, [pc, #456]	@ (80006c8 <main+0x57c>)
 8000500:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000504:	e883 0003 	stmia.w	r3, {r0, r1}
 8000508:	e00b      	b.n	8000522 <main+0x3d6>
			  	  case RTC_WEEKDAY_WEDNESDAY: strcpy(day_arr, "Wednesday\0"); break;
 800050a:	4a70      	ldr	r2, [pc, #448]	@ (80006cc <main+0x580>)
 800050c:	463b      	mov	r3, r7
 800050e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000510:	c303      	stmia	r3!, {r0, r1}
 8000512:	801a      	strh	r2, [r3, #0]
 8000514:	e005      	b.n	8000522 <main+0x3d6>
			  	  case RTC_WEEKDAY_THURSDAY:  strcpy(day_arr, "Thursday\0"); break;
 8000516:	463b      	mov	r3, r7
 8000518:	4a6d      	ldr	r2, [pc, #436]	@ (80006d0 <main+0x584>)
 800051a:	ca07      	ldmia	r2, {r0, r1, r2}
 800051c:	c303      	stmia	r3!, {r0, r1}
 800051e:	701a      	strb	r2, [r3, #0]
 8000520:	bf00      	nop
			  }
		  }

		  date_arr[0]='0'+(date.Date/10);
 8000522:	4b64      	ldr	r3, [pc, #400]	@ (80006b4 <main+0x568>)
 8000524:	789b      	ldrb	r3, [r3, #2]
 8000526:	4a6b      	ldr	r2, [pc, #428]	@ (80006d4 <main+0x588>)
 8000528:	fba2 2303 	umull	r2, r3, r2, r3
 800052c:	08db      	lsrs	r3, r3, #3
 800052e:	b2db      	uxtb	r3, r3
 8000530:	3330      	adds	r3, #48	@ 0x30
 8000532:	b2db      	uxtb	r3, r3
 8000534:	763b      	strb	r3, [r7, #24]
		  date_arr[1]='0'+(date.Date%10);
 8000536:	4b5f      	ldr	r3, [pc, #380]	@ (80006b4 <main+0x568>)
 8000538:	789a      	ldrb	r2, [r3, #2]
 800053a:	4b66      	ldr	r3, [pc, #408]	@ (80006d4 <main+0x588>)
 800053c:	fba3 1302 	umull	r1, r3, r3, r2
 8000540:	08d9      	lsrs	r1, r3, #3
 8000542:	460b      	mov	r3, r1
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	440b      	add	r3, r1
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	1ad3      	subs	r3, r2, r3
 800054c:	b2db      	uxtb	r3, r3
 800054e:	3330      	adds	r3, #48	@ 0x30
 8000550:	b2db      	uxtb	r3, r3
 8000552:	767b      	strb	r3, [r7, #25]
		  date_arr[2]='\0';
 8000554:	2300      	movs	r3, #0
 8000556:	76bb      	strb	r3, [r7, #26]
		  year_arr[0]='2';
 8000558:	2332      	movs	r3, #50	@ 0x32
 800055a:	743b      	strb	r3, [r7, #16]
		  year_arr[1]='0';
 800055c:	2330      	movs	r3, #48	@ 0x30
 800055e:	747b      	strb	r3, [r7, #17]
		  year_arr[2]='0'+(date.Year/10);
 8000560:	4b54      	ldr	r3, [pc, #336]	@ (80006b4 <main+0x568>)
 8000562:	78db      	ldrb	r3, [r3, #3]
 8000564:	4a5b      	ldr	r2, [pc, #364]	@ (80006d4 <main+0x588>)
 8000566:	fba2 2303 	umull	r2, r3, r2, r3
 800056a:	08db      	lsrs	r3, r3, #3
 800056c:	b2db      	uxtb	r3, r3
 800056e:	3330      	adds	r3, #48	@ 0x30
 8000570:	b2db      	uxtb	r3, r3
 8000572:	74bb      	strb	r3, [r7, #18]
		  year_arr[3]='0'+(date.Year%10);
 8000574:	4b4f      	ldr	r3, [pc, #316]	@ (80006b4 <main+0x568>)
 8000576:	78da      	ldrb	r2, [r3, #3]
 8000578:	4b56      	ldr	r3, [pc, #344]	@ (80006d4 <main+0x588>)
 800057a:	fba3 1302 	umull	r1, r3, r3, r2
 800057e:	08d9      	lsrs	r1, r3, #3
 8000580:	460b      	mov	r3, r1
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	440b      	add	r3, r1
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	1ad3      	subs	r3, r2, r3
 800058a:	b2db      	uxtb	r3, r3
 800058c:	3330      	adds	r3, #48	@ 0x30
 800058e:	b2db      	uxtb	r3, r3
 8000590:	74fb      	strb	r3, [r7, #19]
		  year_arr[4]='\0';
 8000592:	2300      	movs	r3, #0
 8000594:	753b      	strb	r3, [r7, #20]


		  ST7735_WriteString(5, 40, date_arr, Font_11x18, ST7735_CYAN, ST7735_BLUE);
 8000596:	4b50      	ldr	r3, [pc, #320]	@ (80006d8 <main+0x58c>)
 8000598:	f107 0118 	add.w	r1, r7, #24
 800059c:	221f      	movs	r2, #31
 800059e:	9202      	str	r2, [sp, #8]
 80005a0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80005a4:	9201      	str	r2, [sp, #4]
 80005a6:	685a      	ldr	r2, [r3, #4]
 80005a8:	9200      	str	r2, [sp, #0]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	460a      	mov	r2, r1
 80005ae:	2128      	movs	r1, #40	@ 0x28
 80005b0:	2005      	movs	r0, #5
 80005b2:	f000 fb48 	bl	8000c46 <ST7735_WriteString>
		  ST7735_WriteString(35, 40, month_arr, Font_11x18, ST7735_CYAN, ST7735_BLUE);
 80005b6:	4b48      	ldr	r3, [pc, #288]	@ (80006d8 <main+0x58c>)
 80005b8:	f107 010c 	add.w	r1, r7, #12
 80005bc:	221f      	movs	r2, #31
 80005be:	9202      	str	r2, [sp, #8]
 80005c0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80005c4:	9201      	str	r2, [sp, #4]
 80005c6:	685a      	ldr	r2, [r3, #4]
 80005c8:	9200      	str	r2, [sp, #0]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	460a      	mov	r2, r1
 80005ce:	2128      	movs	r1, #40	@ 0x28
 80005d0:	2023      	movs	r0, #35	@ 0x23
 80005d2:	f000 fb38 	bl	8000c46 <ST7735_WriteString>
		  ST7735_WriteString(75, 40, year_arr, Font_11x18, ST7735_CYAN, ST7735_BLUE);
 80005d6:	4b40      	ldr	r3, [pc, #256]	@ (80006d8 <main+0x58c>)
 80005d8:	f107 0110 	add.w	r1, r7, #16
 80005dc:	221f      	movs	r2, #31
 80005de:	9202      	str	r2, [sp, #8]
 80005e0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80005e4:	9201      	str	r2, [sp, #4]
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	9200      	str	r2, [sp, #0]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	460a      	mov	r2, r1
 80005ee:	2128      	movs	r1, #40	@ 0x28
 80005f0:	204b      	movs	r0, #75	@ 0x4b
 80005f2:	f000 fb28 	bl	8000c46 <ST7735_WriteString>
		  ST7735_WriteString(15, 70, day_arr,Font_11x18 , ST7735_GREEN, ST7735_BLUE);
 80005f6:	4b38      	ldr	r3, [pc, #224]	@ (80006d8 <main+0x58c>)
 80005f8:	4639      	mov	r1, r7
 80005fa:	221f      	movs	r2, #31
 80005fc:	9202      	str	r2, [sp, #8]
 80005fe:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000602:	9201      	str	r2, [sp, #4]
 8000604:	685a      	ldr	r2, [r3, #4]
 8000606:	9200      	str	r2, [sp, #0]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	460a      	mov	r2, r1
 800060c:	2146      	movs	r1, #70	@ 0x46
 800060e:	200f      	movs	r0, #15
 8000610:	f000 fb19 	bl	8000c46 <ST7735_WriteString>


		  sprintf(newTime, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 8000614:	4b31      	ldr	r3, [pc, #196]	@ (80006dc <main+0x590>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	461a      	mov	r2, r3
 800061a:	4b30      	ldr	r3, [pc, #192]	@ (80006dc <main+0x590>)
 800061c:	785b      	ldrb	r3, [r3, #1]
 800061e:	4619      	mov	r1, r3
 8000620:	4b2e      	ldr	r3, [pc, #184]	@ (80006dc <main+0x590>)
 8000622:	789b      	ldrb	r3, [r3, #2]
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	460b      	mov	r3, r1
 8000628:	492d      	ldr	r1, [pc, #180]	@ (80006e0 <main+0x594>)
 800062a:	482e      	ldr	r0, [pc, #184]	@ (80006e4 <main+0x598>)
 800062c:	f002 ff0e 	bl	800344c <siprintf>
		  ST7735_WriteString(20,110,newTime,Font_11x18,ST7735_WHITE,ST7735_BLUE);
 8000630:	4b29      	ldr	r3, [pc, #164]	@ (80006d8 <main+0x58c>)
 8000632:	221f      	movs	r2, #31
 8000634:	9202      	str	r2, [sp, #8]
 8000636:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	685a      	ldr	r2, [r3, #4]
 800063e:	9200      	str	r2, [sp, #0]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a28      	ldr	r2, [pc, #160]	@ (80006e4 <main+0x598>)
 8000644:	216e      	movs	r1, #110	@ 0x6e
 8000646:	2014      	movs	r0, #20
 8000648:	f000 fafd 	bl	8000c46 <ST7735_WriteString>

		  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, time.Hours);
 800064c:	4b23      	ldr	r3, [pc, #140]	@ (80006dc <main+0x590>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	461a      	mov	r2, r3
 8000652:	2101      	movs	r1, #1
 8000654:	4824      	ldr	r0, [pc, #144]	@ (80006e8 <main+0x59c>)
 8000656:	f002 fb97 	bl	8002d88 <HAL_RTCEx_BKUPWrite>
		  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, time.Minutes);
 800065a:	4b20      	ldr	r3, [pc, #128]	@ (80006dc <main+0x590>)
 800065c:	785b      	ldrb	r3, [r3, #1]
 800065e:	461a      	mov	r2, r3
 8000660:	2102      	movs	r1, #2
 8000662:	4821      	ldr	r0, [pc, #132]	@ (80006e8 <main+0x59c>)
 8000664:	f002 fb90 	bl	8002d88 <HAL_RTCEx_BKUPWrite>
		  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, time.Seconds);
 8000668:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <main+0x590>)
 800066a:	789b      	ldrb	r3, [r3, #2]
 800066c:	461a      	mov	r2, r3
 800066e:	2103      	movs	r1, #3
 8000670:	481d      	ldr	r0, [pc, #116]	@ (80006e8 <main+0x59c>)
 8000672:	f002 fb89 	bl	8002d88 <HAL_RTCEx_BKUPWrite>
		  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, date.Year);
 8000676:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <main+0x568>)
 8000678:	78db      	ldrb	r3, [r3, #3]
 800067a:	461a      	mov	r2, r3
 800067c:	2104      	movs	r1, #4
 800067e:	481a      	ldr	r0, [pc, #104]	@ (80006e8 <main+0x59c>)
 8000680:	f002 fb82 	bl	8002d88 <HAL_RTCEx_BKUPWrite>
		  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, date.Month);
 8000684:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <main+0x568>)
 8000686:	785b      	ldrb	r3, [r3, #1]
 8000688:	461a      	mov	r2, r3
 800068a:	2105      	movs	r1, #5
 800068c:	4816      	ldr	r0, [pc, #88]	@ (80006e8 <main+0x59c>)
 800068e:	f002 fb7b 	bl	8002d88 <HAL_RTCEx_BKUPWrite>
		  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR6, date.Date);
 8000692:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <main+0x568>)
 8000694:	789b      	ldrb	r3, [r3, #2]
 8000696:	461a      	mov	r2, r3
 8000698:	2106      	movs	r1, #6
 800069a:	4813      	ldr	r0, [pc, #76]	@ (80006e8 <main+0x59c>)
 800069c:	f002 fb74 	bl	8002d88 <HAL_RTCEx_BKUPWrite>
		  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR7, date.WeekDay);
 80006a0:	4b04      	ldr	r3, [pc, #16]	@ (80006b4 <main+0x568>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	2107      	movs	r1, #7
 80006a8:	480f      	ldr	r0, [pc, #60]	@ (80006e8 <main+0x59c>)
 80006aa:	f002 fb6d 	bl	8002d88 <HAL_RTCEx_BKUPWrite>
		  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80006ae:	e653      	b.n	8000358 <main+0x20c>
 80006b0:	00636544 	.word	0x00636544
 80006b4:	200000f8 	.word	0x200000f8
 80006b8:	08003c78 	.word	0x08003c78
 80006bc:	08003c80 	.word	0x08003c80
 80006c0:	08003c8c 	.word	0x08003c8c
 80006c4:	006e6f4d 	.word	0x006e6f4d
 80006c8:	08003c9c 	.word	0x08003c9c
 80006cc:	08003ca8 	.word	0x08003ca8
 80006d0:	08003cb4 	.word	0x08003cb4
 80006d4:	cccccccd 	.word	0xcccccccd
 80006d8:	20000008 	.word	0x20000008
 80006dc:	200000f4 	.word	0x200000f4
 80006e0:	08003cc0 	.word	0x08003cc0
 80006e4:	200000fc 	.word	0x200000fc
 80006e8:	20000088 	.word	0x20000088

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	@ 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006f6:	2228      	movs	r2, #40	@ 0x28
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 fec6 	bl	800348c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800071c:	2309      	movs	r3, #9
 800071e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000720:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000724:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072a:	2301      	movs	r3, #1
 800072c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800072e:	2301      	movs	r3, #1
 8000730:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000736:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800073a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800073c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000740:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000742:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000746:	4618      	mov	r0, r3
 8000748:	f000 ffdc 	bl	8001704 <HAL_RCC_OscConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000752:	f000 f901 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	230f      	movs	r3, #15
 8000758:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000766:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2102      	movs	r1, #2
 8000772:	4618      	mov	r0, r3
 8000774:	f001 fa48 	bl	8001c08 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800077e:	f000 f8eb 	bl	8000958 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000782:	2301      	movs	r3, #1
 8000784:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000786:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800078a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fbb4 	bl	8001efc <HAL_RCCEx_PeriphCLKConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800079a:	f000 f8dd 	bl	8000958 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	@ 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  RTC_TimeTypeDef sTime = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2100      	movs	r1, #0
 80007b2:	460a      	mov	r2, r1
 80007b4:	801a      	strh	r2, [r3, #0]
 80007b6:	460a      	mov	r2, r1
 80007b8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007be:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <MX_RTC_Init+0x8c>)
 80007c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000838 <MX_RTC_Init+0x90>)
 80007c2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <MX_RTC_Init+0x8c>)
 80007c6:	f04f 32ff 	mov.w	r2, #4294967295
 80007ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80007cc:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <MX_RTC_Init+0x8c>)
 80007ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007d2:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007d4:	4817      	ldr	r0, [pc, #92]	@ (8000834 <MX_RTC_Init+0x8c>)
 80007d6:	f001 fcfd 	bl	80021d4 <HAL_RTC_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80007e0:	f000 f8ba 	bl	8000958 <Error_Handler>
  }

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 5;
 80007e4:	2305      	movs	r3, #5
 80007e6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 50;
 80007e8:	2332      	movs	r3, #50	@ 0x32
 80007ea:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 10;
 80007ec:	230a      	movs	r3, #10
 80007ee:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	480f      	ldr	r0, [pc, #60]	@ (8000834 <MX_RTC_Init+0x8c>)
 80007f8:	f001 fd78 	bl	80022ec <HAL_RTC_SetTime>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000802:	f000 f8a9 	bl	8000958 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000806:	2304      	movs	r3, #4
 8000808:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JULY;
 800080a:	2307      	movs	r3, #7
 800080c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 11;
 800080e:	230b      	movs	r3, #11
 8000810:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 24;
 8000812:	2318      	movs	r3, #24
 8000814:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8000816:	463b      	mov	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	4619      	mov	r1, r3
 800081c:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_RTC_Init+0x8c>)
 800081e:	f001 fed5 	bl	80025cc <HAL_RTC_SetDate>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000828:	f000 f896 	bl	8000958 <Error_Handler>
  }

}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000088 	.word	0x20000088
 8000838:	40002800 	.word	0x40002800

0800083c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0


  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000840:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000842:	4a18      	ldr	r2, [pc, #96]	@ (80008a4 <MX_SPI1_Init+0x68>)
 8000844:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000846:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000848:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800084c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800084e:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000854:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_SPI1_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000868:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800086c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800086e:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000870:	2208      	movs	r2, #8
 8000872:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_SPI1_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000880:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000888:	220a      	movs	r2, #10
 800088a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <MX_SPI1_Init+0x64>)
 800088e:	f002 fab1 	bl	8002df4 <HAL_SPI_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000898:	f000 f85e 	bl	8000958 <Error_Handler>
  }

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2000009c 	.word	0x2000009c
 80008a4:	40013000 	.word	0x40013000

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0310 	add.w	r3, r7, #16
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008bc:	4b24      	ldr	r3, [pc, #144]	@ (8000950 <MX_GPIO_Init+0xa8>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a23      	ldr	r2, [pc, #140]	@ (8000950 <MX_GPIO_Init+0xa8>)
 80008c2:	f043 0310 	orr.w	r3, r3, #16
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b21      	ldr	r3, [pc, #132]	@ (8000950 <MX_GPIO_Init+0xa8>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0310 	and.w	r3, r3, #16
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000950 <MX_GPIO_Init+0xa8>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a1d      	ldr	r2, [pc, #116]	@ (8000950 <MX_GPIO_Init+0xa8>)
 80008da:	f043 0320 	orr.w	r3, r3, #32
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000950 <MX_GPIO_Init+0xa8>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0320 	and.w	r3, r3, #32
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	4b18      	ldr	r3, [pc, #96]	@ (8000950 <MX_GPIO_Init+0xa8>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a17      	ldr	r2, [pc, #92]	@ (8000950 <MX_GPIO_Init+0xa8>)
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <MX_GPIO_Init+0xa8>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <MX_GPIO_Init+0xa8>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	4a11      	ldr	r2, [pc, #68]	@ (8000950 <MX_GPIO_Init+0xa8>)
 800090a:	f043 0308 	orr.w	r3, r3, #8
 800090e:	6193      	str	r3, [r2, #24]
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_GPIO_Init+0xa8>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f003 0308 	and.w	r3, r3, #8
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000922:	480c      	ldr	r0, [pc, #48]	@ (8000954 <MX_GPIO_Init+0xac>)
 8000924:	f000 feca 	bl	80016bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000928:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800092c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2302      	movs	r3, #2
 8000938:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	f107 0310 	add.w	r3, r7, #16
 800093e:	4619      	mov	r1, r3
 8000940:	4804      	ldr	r0, [pc, #16]	@ (8000954 <MX_GPIO_Init+0xac>)
 8000942:	f000 fd37 	bl	80013b4 <HAL_GPIO_Init>

}
 8000946:	bf00      	nop
 8000948:	3720      	adds	r7, #32
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000
 8000954:	40010c00 	.word	0x40010c00

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <Error_Handler+0x8>

08000964 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2140      	movs	r1, #64	@ 0x40
 800096c:	4802      	ldr	r0, [pc, #8]	@ (8000978 <ST7735_Select+0x14>)
 800096e:	f000 fea5 	bl	80016bc <HAL_GPIO_WritePin>
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40010c00 	.word	0x40010c00

0800097c <ST7735_Unselect>:

void ST7735_Unselect() {
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	2140      	movs	r1, #64	@ 0x40
 8000984:	4802      	ldr	r0, [pc, #8]	@ (8000990 <ST7735_Unselect+0x14>)
 8000986:	f000 fe99 	bl	80016bc <HAL_GPIO_WritePin>
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40010c00 	.word	0x40010c00

08000994 <ST7735_Reset>:

static void ST7735_Reset() {
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	2180      	movs	r1, #128	@ 0x80
 800099c:	4806      	ldr	r0, [pc, #24]	@ (80009b8 <ST7735_Reset+0x24>)
 800099e:	f000 fe8d 	bl	80016bc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80009a2:	2005      	movs	r0, #5
 80009a4:	f000 fbd4 	bl	8001150 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	2180      	movs	r1, #128	@ 0x80
 80009ac:	4802      	ldr	r0, [pc, #8]	@ (80009b8 <ST7735_Reset+0x24>)
 80009ae:	f000 fe85 	bl	80016bc <HAL_GPIO_WritePin>
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40010c00 	.word	0x40010c00

080009bc <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009cc:	4806      	ldr	r0, [pc, #24]	@ (80009e8 <ST7735_WriteCommand+0x2c>)
 80009ce:	f000 fe75 	bl	80016bc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80009d2:	1df9      	adds	r1, r7, #7
 80009d4:	f04f 33ff 	mov.w	r3, #4294967295
 80009d8:	2201      	movs	r2, #1
 80009da:	4804      	ldr	r0, [pc, #16]	@ (80009ec <ST7735_WriteCommand+0x30>)
 80009dc:	f002 fa8e 	bl	8002efc <HAL_SPI_Transmit>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40010c00 	.word	0x40010c00
 80009ec:	2000009c 	.word	0x2000009c

080009f0 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80009fa:	2201      	movs	r2, #1
 80009fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a00:	4807      	ldr	r0, [pc, #28]	@ (8000a20 <ST7735_WriteData+0x30>)
 8000a02:	f000 fe5b 	bl	80016bc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	4804      	ldr	r0, [pc, #16]	@ (8000a24 <ST7735_WriteData+0x34>)
 8000a12:	f002 fa73 	bl	8002efc <HAL_SPI_Transmit>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40010c00 	.word	0x40010c00
 8000a24:	2000009c 	.word	0x2000009c

08000a28 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	607a      	str	r2, [r7, #4]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000a3a:	e034      	b.n	8000aa6 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000a46:	7afb      	ldrb	r3, [r7, #11]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ffb7 	bl	80009bc <ST7735_WriteCommand>

        numArgs = *addr++;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	1c5a      	adds	r2, r3, #1
 8000a52:	607a      	str	r2, [r7, #4]
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000a58:	7abb      	ldrb	r3, [r7, #10]
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a60:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000a62:	7abb      	ldrb	r3, [r7, #10]
 8000a64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a68:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000a6a:	7abb      	ldrb	r3, [r7, #10]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d008      	beq.n	8000a82 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000a70:	7abb      	ldrb	r3, [r7, #10]
 8000a72:	4619      	mov	r1, r3
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ffbb 	bl	80009f0 <ST7735_WriteData>
            addr += numArgs;
 8000a7a:	7abb      	ldrb	r3, [r7, #10]
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000a82:	89bb      	ldrh	r3, [r7, #12]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d00e      	beq.n	8000aa6 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	607a      	str	r2, [r7, #4]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000a92:	89bb      	ldrh	r3, [r7, #12]
 8000a94:	2bff      	cmp	r3, #255	@ 0xff
 8000a96:	d102      	bne.n	8000a9e <ST7735_ExecuteCommandList+0x76>
 8000a98:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000a9c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000a9e:	89bb      	ldrh	r3, [r7, #12]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fb55 	bl	8001150 <HAL_Delay>
    while(numCommands--) {
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
 8000aa8:	1e5a      	subs	r2, r3, #1
 8000aaa:	73fa      	strb	r2, [r7, #15]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1c5      	bne.n	8000a3c <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000ab0:	bf00      	nop
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000aba:	b590      	push	{r4, r7, lr}
 8000abc:	b085      	sub	sp, #20
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4604      	mov	r4, r0
 8000ac2:	4608      	mov	r0, r1
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4623      	mov	r3, r4
 8000aca:	71fb      	strb	r3, [r7, #7]
 8000acc:	4603      	mov	r3, r0
 8000ace:	71bb      	strb	r3, [r7, #6]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	717b      	strb	r3, [r7, #5]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000ad8:	202a      	movs	r0, #42	@ 0x2a
 8000ada:	f7ff ff6f 	bl	80009bc <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000ade:	2300      	movs	r3, #0
 8000ae0:	733b      	strb	r3, [r7, #12]
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	737b      	strb	r3, [r7, #13]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	73bb      	strb	r3, [r7, #14]
 8000aea:	797b      	ldrb	r3, [r7, #5]
 8000aec:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	2104      	movs	r1, #4
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff7b 	bl	80009f0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000afa:	202b      	movs	r0, #43	@ 0x2b
 8000afc:	f7ff ff5e 	bl	80009bc <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000b00:	79bb      	ldrb	r3, [r7, #6]
 8000b02:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000b04:	793b      	ldrb	r3, [r7, #4]
 8000b06:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	2104      	movs	r1, #4
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ff6e 	bl	80009f0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000b14:	202c      	movs	r0, #44	@ 0x2c
 8000b16:	f7ff ff51 	bl	80009bc <ST7735_WriteCommand>
}
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd90      	pop	{r4, r7, pc}
	...

08000b24 <ST7735_Init>:

void ST7735_Init() {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000b28:	f7ff ff1c 	bl	8000964 <ST7735_Select>
    ST7735_Reset();
 8000b2c:	f7ff ff32 	bl	8000994 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000b30:	4806      	ldr	r0, [pc, #24]	@ (8000b4c <ST7735_Init+0x28>)
 8000b32:	f7ff ff79 	bl	8000a28 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000b36:	4806      	ldr	r0, [pc, #24]	@ (8000b50 <ST7735_Init+0x2c>)
 8000b38:	f7ff ff76 	bl	8000a28 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000b3c:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <ST7735_Init+0x30>)
 8000b3e:	f7ff ff73 	bl	8000a28 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000b42:	f7ff ff1b 	bl	800097c <ST7735_Unselect>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	08005198 	.word	0x08005198
 8000b50:	080051d4 	.word	0x080051d4
 8000b54:	080051e4 	.word	0x080051e4

08000b58 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000b58:	b082      	sub	sp, #8
 8000b5a:	b590      	push	{r4, r7, lr}
 8000b5c:	b089      	sub	sp, #36	@ 0x24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	637b      	str	r3, [r7, #52]	@ 0x34
 8000b62:	4603      	mov	r3, r0
 8000b64:	80fb      	strh	r3, [r7, #6]
 8000b66:	460b      	mov	r3, r1
 8000b68:	80bb      	strh	r3, [r7, #4]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	b2d8      	uxtb	r0, r3
 8000b72:	88bb      	ldrh	r3, [r7, #4]
 8000b74:	b2d9      	uxtb	r1, r3
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000b7e:	4413      	add	r3, r2
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	3b01      	subs	r3, #1
 8000b84:	b2dc      	uxtb	r4, r3
 8000b86:	88bb      	ldrh	r3, [r7, #4]
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000b8e:	4413      	add	r3, r2
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	3b01      	subs	r3, #1
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	4622      	mov	r2, r4
 8000b98:	f7ff ff8f 	bl	8000aba <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
 8000ba0:	e043      	b.n	8000c2a <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000ba2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	3b20      	subs	r3, #32
 8000ba8:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000bac:	fb01 f303 	mul.w	r3, r1, r3
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	440b      	add	r3, r1
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
 8000bc2:	e029      	b.n	8000c18 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d00e      	beq.n	8000bf2 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000bd4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	743b      	strb	r3, [r7, #16]
 8000bde:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	2102      	movs	r1, #2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff00 	bl	80009f0 <ST7735_WriteData>
 8000bf0:	e00f      	b.n	8000c12 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000bf2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000bf6:	0a1b      	lsrs	r3, r3, #8
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	733b      	strb	r3, [r7, #12]
 8000bfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff feef 	bl	80009f0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	3301      	adds	r3, #1
 8000c16:	61bb      	str	r3, [r7, #24]
 8000c18:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d3cf      	bcc.n	8000bc4 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	3301      	adds	r3, #1
 8000c28:	61fb      	str	r3, [r7, #28]
 8000c2a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000c2e:	461a      	mov	r2, r3
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d3b5      	bcc.n	8000ba2 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000c36:	bf00      	nop
 8000c38:	bf00      	nop
 8000c3a:	3724      	adds	r7, #36	@ 0x24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000c42:	b002      	add	sp, #8
 8000c44:	4770      	bx	lr

08000c46 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000c46:	b082      	sub	sp, #8
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af04      	add	r7, sp, #16
 8000c4e:	603a      	str	r2, [r7, #0]
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
 8000c56:	460b      	mov	r3, r1
 8000c58:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000c5a:	f7ff fe83 	bl	8000964 <ST7735_Select>

    while(*str) {
 8000c5e:	e02d      	b.n	8000cbc <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	7d3a      	ldrb	r2, [r7, #20]
 8000c64:	4413      	add	r3, r2
 8000c66:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c68:	dd13      	ble.n	8000c92 <ST7735_WriteString+0x4c>
            x = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000c6e:	7d7b      	ldrb	r3, [r7, #21]
 8000c70:	461a      	mov	r2, r3
 8000c72:	88bb      	ldrh	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8000c78:	88bb      	ldrh	r3, [r7, #4]
 8000c7a:	7d7a      	ldrb	r2, [r7, #21]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	2b9f      	cmp	r3, #159	@ 0x9f
 8000c80:	dc21      	bgt.n	8000cc6 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b20      	cmp	r3, #32
 8000c88:	d103      	bne.n	8000c92 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	603b      	str	r3, [r7, #0]
                continue;
 8000c90:	e014      	b.n	8000cbc <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	781a      	ldrb	r2, [r3, #0]
 8000c96:	88b9      	ldrh	r1, [r7, #4]
 8000c98:	88f8      	ldrh	r0, [r7, #6]
 8000c9a:	8c3b      	ldrh	r3, [r7, #32]
 8000c9c:	9302      	str	r3, [sp, #8]
 8000c9e:	8bbb      	ldrh	r3, [r7, #28]
 8000ca0:	9301      	str	r3, [sp, #4]
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	f7ff ff56 	bl	8000b58 <ST7735_WriteChar>
        x += font.width;
 8000cac:	7d3b      	ldrb	r3, [r7, #20]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	80fb      	strh	r3, [r7, #6]
        str++;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1cd      	bne.n	8000c60 <ST7735_WriteString+0x1a>
 8000cc4:	e000      	b.n	8000cc8 <ST7735_WriteString+0x82>
                break;
 8000cc6:	bf00      	nop
    }

    ST7735_Unselect();
 8000cc8:	f7ff fe58 	bl	800097c <ST7735_Unselect>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cd6:	b002      	add	sp, #8
 8000cd8:	4770      	bx	lr
	...

08000cdc <ST7735_FillRectangleFast>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4604      	mov	r4, r0
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4623      	mov	r3, r4
 8000cec:	80fb      	strh	r3, [r7, #6]
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80bb      	strh	r3, [r7, #4]
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	807b      	strh	r3, [r7, #2]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cfe:	d86a      	bhi.n	8000dd6 <ST7735_FillRectangleFast+0xfa>
 8000d00:	88bb      	ldrh	r3, [r7, #4]
 8000d02:	2b9f      	cmp	r3, #159	@ 0x9f
 8000d04:	d867      	bhi.n	8000dd6 <ST7735_FillRectangleFast+0xfa>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000d06:	88fa      	ldrh	r2, [r7, #6]
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	2b80      	cmp	r3, #128	@ 0x80
 8000d0e:	dd03      	ble.n	8000d18 <ST7735_FillRectangleFast+0x3c>
 8000d10:	88fb      	ldrh	r3, [r7, #6]
 8000d12:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000d16:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000d18:	88ba      	ldrh	r2, [r7, #4]
 8000d1a:	883b      	ldrh	r3, [r7, #0]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	2ba0      	cmp	r3, #160	@ 0xa0
 8000d20:	dd03      	ble.n	8000d2a <ST7735_FillRectangleFast+0x4e>
 8000d22:	88bb      	ldrh	r3, [r7, #4]
 8000d24:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8000d28:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000d2a:	f7ff fe1b 	bl	8000964 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	b2d8      	uxtb	r0, r3
 8000d32:	88bb      	ldrh	r3, [r7, #4]
 8000d34:	b2d9      	uxtb	r1, r3
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	887b      	ldrh	r3, [r7, #2]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	4413      	add	r3, r2
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	3b01      	subs	r3, #1
 8000d44:	b2dc      	uxtb	r4, r3
 8000d46:	88bb      	ldrh	r3, [r7, #4]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	883b      	ldrh	r3, [r7, #0]
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	4413      	add	r3, r2
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	3b01      	subs	r3, #1
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	4622      	mov	r2, r4
 8000d58:	f7ff feaf 	bl	8000aba <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8000d5c:	8c3b      	ldrh	r3, [r7, #32]
 8000d5e:	0a1b      	lsrs	r3, r3, #8
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	723b      	strb	r3, [r7, #8]
 8000d66:	8c3b      	ldrh	r3, [r7, #32]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8000d6c:	887b      	ldrh	r3, [r7, #2]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 faad 	bl	80032d0 <malloc>
 8000d76:	4603      	mov	r3, r0
 8000d78:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	80fb      	strh	r3, [r7, #6]
 8000d7e:	e008      	b.n	8000d92 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	893a      	ldrh	r2, [r7, #8]
 8000d8a:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8000d8c:	88fb      	ldrh	r3, [r7, #6]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	80fb      	strh	r3, [r7, #6]
 8000d92:	88fa      	ldrh	r2, [r7, #6]
 8000d94:	887b      	ldrh	r3, [r7, #2]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d3f2      	bcc.n	8000d80 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000da0:	480f      	ldr	r0, [pc, #60]	@ (8000de0 <ST7735_FillRectangleFast+0x104>)
 8000da2:	f000 fc8b 	bl	80016bc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8000da6:	883b      	ldrh	r3, [r7, #0]
 8000da8:	80bb      	strh	r3, [r7, #4]
 8000daa:	e00b      	b.n	8000dc4 <ST7735_FillRectangleFast+0xe8>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 8000dac:	887b      	ldrh	r3, [r7, #2]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	68f9      	ldr	r1, [r7, #12]
 8000db8:	480a      	ldr	r0, [pc, #40]	@ (8000de4 <ST7735_FillRectangleFast+0x108>)
 8000dba:	f002 f89f 	bl	8002efc <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8000dbe:	88bb      	ldrh	r3, [r7, #4]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	80bb      	strh	r3, [r7, #4]
 8000dc4:	88bb      	ldrh	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f0      	bne.n	8000dac <ST7735_FillRectangleFast+0xd0>

    free(line);
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f002 fa88 	bl	80032e0 <free>
    ST7735_Unselect();
 8000dd0:	f7ff fdd4 	bl	800097c <ST7735_Unselect>
 8000dd4:	e000      	b.n	8000dd8 <ST7735_FillRectangleFast+0xfc>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000dd6:	bf00      	nop
}
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd90      	pop	{r4, r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40010c00 	.word	0x40010c00
 8000de4:	2000009c 	.word	0x2000009c

08000de8 <ST7735_FillScreenFast>:

void ST7735_FillScreen(uint16_t color) {
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}

void ST7735_FillScreenFast(uint16_t color) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af02      	add	r7, sp, #8
 8000dee:	4603      	mov	r3, r0
 8000df0:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	23a0      	movs	r3, #160	@ 0xa0
 8000df8:	2280      	movs	r2, #128	@ 0x80
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff ff6d 	bl	8000cdc <ST7735_FillRectangleFast>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e12:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <HAL_MspInit+0x5c>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	4a14      	ldr	r2, [pc, #80]	@ (8000e68 <HAL_MspInit+0x5c>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6193      	str	r3, [r2, #24]
 8000e1e:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <HAL_MspInit+0x5c>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <HAL_MspInit+0x5c>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e68 <HAL_MspInit+0x5c>)
 8000e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e34:	61d3      	str	r3, [r2, #28]
 8000e36:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <HAL_MspInit+0x5c>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <HAL_MspInit+0x60>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	4a04      	ldr	r2, [pc, #16]	@ (8000e6c <HAL_MspInit+0x60>)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40010000 	.word	0x40010000

08000e70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0f      	ldr	r2, [pc, #60]	@ (8000ebc <HAL_RTC_MspInit+0x4c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d118      	bne.n	8000eb4 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000e82:	f000 fc33 	bl	80016ec <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000e86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <HAL_RTC_MspInit+0x50>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec0 <HAL_RTC_MspInit+0x50>)
 8000e8c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e90:	61d3      	str	r3, [r2, #28]
 8000e92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <HAL_RTC_MspInit+0x50>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <HAL_RTC_MspInit+0x54>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2029      	movs	r0, #41	@ 0x29
 8000eaa:	f000 fa4c 	bl	8001346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000eae:	2029      	movs	r0, #41	@ 0x29
 8000eb0:	f000 fa65 	bl	800137e <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40002800 	.word	0x40002800
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	4242043c 	.word	0x4242043c

08000ec8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8000f50 <HAL_SPI_MspInit+0x88>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d12f      	bne.n	8000f48 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f54 <HAL_SPI_MspInit+0x8c>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a19      	ldr	r2, [pc, #100]	@ (8000f54 <HAL_SPI_MspInit+0x8c>)
 8000eee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b17      	ldr	r3, [pc, #92]	@ (8000f54 <HAL_SPI_MspInit+0x8c>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <HAL_SPI_MspInit+0x8c>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a13      	ldr	r2, [pc, #76]	@ (8000f54 <HAL_SPI_MspInit+0x8c>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <HAL_SPI_MspInit+0x8c>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f18:	23a0      	movs	r3, #160	@ 0xa0
 8000f1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480b      	ldr	r0, [pc, #44]	@ (8000f58 <HAL_SPI_MspInit+0x90>)
 8000f2c:	f000 fa42 	bl	80013b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f30:	2340      	movs	r3, #64	@ 0x40
 8000f32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	4619      	mov	r1, r3
 8000f42:	4805      	ldr	r0, [pc, #20]	@ (8000f58 <HAL_SPI_MspInit+0x90>)
 8000f44:	f000 fa36 	bl	80013b4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000f48:	bf00      	nop
 8000f4a:	3720      	adds	r7, #32
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40013000 	.word	0x40013000
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40010800 	.word	0x40010800

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <NMI_Handler+0x4>

08000f64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <MemManage_Handler+0x4>

08000f74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fac:	f000 f8b4 	bl	8001118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000fb8:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <RTC_Alarm_IRQHandler+0x10>)
 8000fba:	f001 fc11 	bl	80027e0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000088 	.word	0x20000088

08000fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd0:	4a14      	ldr	r2, [pc, #80]	@ (8001024 <_sbrk+0x5c>)
 8000fd2:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <_sbrk+0x60>)
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fdc:	4b13      	ldr	r3, [pc, #76]	@ (800102c <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	@ (800102c <_sbrk+0x64>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	@ (8001030 <_sbrk+0x68>)
 8000fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fea:	4b10      	ldr	r3, [pc, #64]	@ (800102c <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d207      	bcs.n	8001008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff8:	f002 fa60 	bl	80034bc <__errno>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	220c      	movs	r2, #12
 8001000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e009      	b.n	800101c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100e:	4b07      	ldr	r3, [pc, #28]	@ (800102c <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	4a05      	ldr	r2, [pc, #20]	@ (800102c <_sbrk+0x64>)
 8001018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101a:	68fb      	ldr	r3, [r7, #12]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20005000 	.word	0x20005000
 8001028:	00000400 	.word	0x00000400
 800102c:	2000011c 	.word	0x2000011c
 8001030:	20000270 	.word	0x20000270

08001034 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001040:	f7ff fff8 	bl	8001034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001044:	480b      	ldr	r0, [pc, #44]	@ (8001074 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001046:	490c      	ldr	r1, [pc, #48]	@ (8001078 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001048:	4a0c      	ldr	r2, [pc, #48]	@ (800107c <LoopFillZerobss+0x16>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a09      	ldr	r2, [pc, #36]	@ (8001080 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800105c:	4c09      	ldr	r4, [pc, #36]	@ (8001084 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800106a:	f002 fa2d 	bl	80034c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800106e:	f7ff f86d 	bl	800014c <main>
  bx lr
 8001072:	4770      	bx	lr
  ldr r0, =_sdata
 8001074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001078:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800107c:	0800528c 	.word	0x0800528c
  ldr r2, =_sbss
 8001080:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001084:	2000026c 	.word	0x2000026c

08001088 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC1_2_IRQHandler>
	...

0800108c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001090:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <HAL_Init+0x28>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a07      	ldr	r2, [pc, #28]	@ (80010b4 <HAL_Init+0x28>)
 8001096:	f043 0310 	orr.w	r3, r3, #16
 800109a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800109c:	2003      	movs	r0, #3
 800109e:	f000 f947 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a2:	200f      	movs	r0, #15
 80010a4:	f000 f808 	bl	80010b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a8:	f7ff feb0 	bl	8000e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40022000 	.word	0x40022000

080010b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c0:	4b12      	ldr	r3, [pc, #72]	@ (800110c <HAL_InitTick+0x54>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <HAL_InitTick+0x58>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 f95f 	bl	800139a <HAL_SYSTICK_Config>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00e      	b.n	8001104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b0f      	cmp	r3, #15
 80010ea:	d80a      	bhi.n	8001102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ec:	2200      	movs	r2, #0
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f000 f927 	bl	8001346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f8:	4a06      	ldr	r2, [pc, #24]	@ (8001114 <HAL_InitTick+0x5c>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	e000      	b.n	8001104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000010 	.word	0x20000010
 8001110:	20000018 	.word	0x20000018
 8001114:	20000014 	.word	0x20000014

08001118 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800111c:	4b05      	ldr	r3, [pc, #20]	@ (8001134 <HAL_IncTick+0x1c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <HAL_IncTick+0x20>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a03      	ldr	r2, [pc, #12]	@ (8001138 <HAL_IncTick+0x20>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	20000018 	.word	0x20000018
 8001138:	20000120 	.word	0x20000120

0800113c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b02      	ldr	r3, [pc, #8]	@ (800114c <HAL_GetTick+0x10>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	20000120 	.word	0x20000120

08001150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff fff0 	bl	800113c <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001168:	d005      	beq.n	8001176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116a:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <HAL_Delay+0x44>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4413      	add	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001176:	bf00      	nop
 8001178:	f7ff ffe0 	bl	800113c <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8f7      	bhi.n	8001178 <HAL_Delay+0x28>
  {
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000018 	.word	0x20000018

08001198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011b4:	4013      	ands	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	@ (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e4:	4b04      	ldr	r3, [pc, #16]	@ (80011f8 <__NVIC_GetPriorityGrouping+0x18>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	f003 0307 	and.w	r3, r3, #7
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	2b00      	cmp	r3, #0
 800120c:	db0b      	blt.n	8001226 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	f003 021f 	and.w	r2, r3, #31
 8001214:	4906      	ldr	r1, [pc, #24]	@ (8001230 <__NVIC_EnableIRQ+0x34>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	2001      	movs	r0, #1
 800121e:	fa00 f202 	lsl.w	r2, r0, r2
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	@ (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	@ (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	@ 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	@ 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012fc:	d301      	bcc.n	8001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fe:	2301      	movs	r3, #1
 8001300:	e00f      	b.n	8001322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001302:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <SysTick_Config+0x40>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130a:	210f      	movs	r1, #15
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f7ff ff90 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <SysTick_Config+0x40>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	@ (800132c <SysTick_Config+0x40>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff2d 	bl	8001198 <__NVIC_SetPriorityGrouping>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff42 	bl	80011e0 <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff90 	bl	8001288 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5f 	bl	8001234 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff35 	bl	80011fc <__NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffa2 	bl	80012ec <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b08b      	sub	sp, #44	@ 0x2c
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c6:	e169      	b.n	800169c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013c8:	2201      	movs	r2, #1
 80013ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	f040 8158 	bne.w	8001696 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	4a9a      	ldr	r2, [pc, #616]	@ (8001654 <HAL_GPIO_Init+0x2a0>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d05e      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 80013f0:	4a98      	ldr	r2, [pc, #608]	@ (8001654 <HAL_GPIO_Init+0x2a0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d875      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 80013f6:	4a98      	ldr	r2, [pc, #608]	@ (8001658 <HAL_GPIO_Init+0x2a4>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d058      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 80013fc:	4a96      	ldr	r2, [pc, #600]	@ (8001658 <HAL_GPIO_Init+0x2a4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d86f      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 8001402:	4a96      	ldr	r2, [pc, #600]	@ (800165c <HAL_GPIO_Init+0x2a8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d052      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 8001408:	4a94      	ldr	r2, [pc, #592]	@ (800165c <HAL_GPIO_Init+0x2a8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d869      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 800140e:	4a94      	ldr	r2, [pc, #592]	@ (8001660 <HAL_GPIO_Init+0x2ac>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d04c      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 8001414:	4a92      	ldr	r2, [pc, #584]	@ (8001660 <HAL_GPIO_Init+0x2ac>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d863      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 800141a:	4a92      	ldr	r2, [pc, #584]	@ (8001664 <HAL_GPIO_Init+0x2b0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d046      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 8001420:	4a90      	ldr	r2, [pc, #576]	@ (8001664 <HAL_GPIO_Init+0x2b0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d85d      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 8001426:	2b12      	cmp	r3, #18
 8001428:	d82a      	bhi.n	8001480 <HAL_GPIO_Init+0xcc>
 800142a:	2b12      	cmp	r3, #18
 800142c:	d859      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 800142e:	a201      	add	r2, pc, #4	@ (adr r2, 8001434 <HAL_GPIO_Init+0x80>)
 8001430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001434:	080014af 	.word	0x080014af
 8001438:	08001489 	.word	0x08001489
 800143c:	0800149b 	.word	0x0800149b
 8001440:	080014dd 	.word	0x080014dd
 8001444:	080014e3 	.word	0x080014e3
 8001448:	080014e3 	.word	0x080014e3
 800144c:	080014e3 	.word	0x080014e3
 8001450:	080014e3 	.word	0x080014e3
 8001454:	080014e3 	.word	0x080014e3
 8001458:	080014e3 	.word	0x080014e3
 800145c:	080014e3 	.word	0x080014e3
 8001460:	080014e3 	.word	0x080014e3
 8001464:	080014e3 	.word	0x080014e3
 8001468:	080014e3 	.word	0x080014e3
 800146c:	080014e3 	.word	0x080014e3
 8001470:	080014e3 	.word	0x080014e3
 8001474:	080014e3 	.word	0x080014e3
 8001478:	08001491 	.word	0x08001491
 800147c:	080014a5 	.word	0x080014a5
 8001480:	4a79      	ldr	r2, [pc, #484]	@ (8001668 <HAL_GPIO_Init+0x2b4>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d013      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001486:	e02c      	b.n	80014e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	623b      	str	r3, [r7, #32]
          break;
 800148e:	e029      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	3304      	adds	r3, #4
 8001496:	623b      	str	r3, [r7, #32]
          break;
 8001498:	e024      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	3308      	adds	r3, #8
 80014a0:	623b      	str	r3, [r7, #32]
          break;
 80014a2:	e01f      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	330c      	adds	r3, #12
 80014aa:	623b      	str	r3, [r7, #32]
          break;
 80014ac:	e01a      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014b6:	2304      	movs	r3, #4
 80014b8:	623b      	str	r3, [r7, #32]
          break;
 80014ba:	e013      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d105      	bne.n	80014d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c4:	2308      	movs	r3, #8
 80014c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	611a      	str	r2, [r3, #16]
          break;
 80014ce:	e009      	b.n	80014e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d0:	2308      	movs	r3, #8
 80014d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	615a      	str	r2, [r3, #20]
          break;
 80014da:	e003      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
          break;
 80014e0:	e000      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          break;
 80014e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	2bff      	cmp	r3, #255	@ 0xff
 80014e8:	d801      	bhi.n	80014ee <HAL_GPIO_Init+0x13a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	e001      	b.n	80014f2 <HAL_GPIO_Init+0x13e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3304      	adds	r3, #4
 80014f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2bff      	cmp	r3, #255	@ 0xff
 80014f8:	d802      	bhi.n	8001500 <HAL_GPIO_Init+0x14c>
 80014fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	e002      	b.n	8001506 <HAL_GPIO_Init+0x152>
 8001500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001502:	3b08      	subs	r3, #8
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	210f      	movs	r1, #15
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	401a      	ands	r2, r3
 8001518:	6a39      	ldr	r1, [r7, #32]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
 8001520:	431a      	orrs	r2, r3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80b1 	beq.w	8001696 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001534:	4b4d      	ldr	r3, [pc, #308]	@ (800166c <HAL_GPIO_Init+0x2b8>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a4c      	ldr	r2, [pc, #304]	@ (800166c <HAL_GPIO_Init+0x2b8>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b4a      	ldr	r3, [pc, #296]	@ (800166c <HAL_GPIO_Init+0x2b8>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800154c:	4a48      	ldr	r2, [pc, #288]	@ (8001670 <HAL_GPIO_Init+0x2bc>)
 800154e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	3302      	adds	r3, #2
 8001554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001558:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800155a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	220f      	movs	r2, #15
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	4013      	ands	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a40      	ldr	r2, [pc, #256]	@ (8001674 <HAL_GPIO_Init+0x2c0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d013      	beq.n	80015a0 <HAL_GPIO_Init+0x1ec>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a3f      	ldr	r2, [pc, #252]	@ (8001678 <HAL_GPIO_Init+0x2c4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d00d      	beq.n	800159c <HAL_GPIO_Init+0x1e8>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a3e      	ldr	r2, [pc, #248]	@ (800167c <HAL_GPIO_Init+0x2c8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d007      	beq.n	8001598 <HAL_GPIO_Init+0x1e4>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a3d      	ldr	r2, [pc, #244]	@ (8001680 <HAL_GPIO_Init+0x2cc>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d101      	bne.n	8001594 <HAL_GPIO_Init+0x1e0>
 8001590:	2303      	movs	r3, #3
 8001592:	e006      	b.n	80015a2 <HAL_GPIO_Init+0x1ee>
 8001594:	2304      	movs	r3, #4
 8001596:	e004      	b.n	80015a2 <HAL_GPIO_Init+0x1ee>
 8001598:	2302      	movs	r3, #2
 800159a:	e002      	b.n	80015a2 <HAL_GPIO_Init+0x1ee>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <HAL_GPIO_Init+0x1ee>
 80015a0:	2300      	movs	r3, #0
 80015a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015a4:	f002 0203 	and.w	r2, r2, #3
 80015a8:	0092      	lsls	r2, r2, #2
 80015aa:	4093      	lsls	r3, r2
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015b2:	492f      	ldr	r1, [pc, #188]	@ (8001670 <HAL_GPIO_Init+0x2bc>)
 80015b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	3302      	adds	r3, #2
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d006      	beq.n	80015da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	492c      	ldr	r1, [pc, #176]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	608b      	str	r3, [r1, #8]
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015da:	4b2a      	ldr	r3, [pc, #168]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	4928      	ldr	r1, [pc, #160]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015f4:	4b23      	ldr	r3, [pc, #140]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	4922      	ldr	r1, [pc, #136]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	60cb      	str	r3, [r1, #12]
 8001600:	e006      	b.n	8001610 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001602:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	43db      	mvns	r3, r3
 800160a:	491e      	ldr	r1, [pc, #120]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 800160c:	4013      	ands	r3, r2
 800160e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800161c:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	4918      	ldr	r1, [pc, #96]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800162a:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	43db      	mvns	r3, r3
 8001632:	4914      	ldr	r1, [pc, #80]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 8001634:	4013      	ands	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d021      	beq.n	8001688 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001644:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	490e      	ldr	r1, [pc, #56]	@ (8001684 <HAL_GPIO_Init+0x2d0>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	600b      	str	r3, [r1, #0]
 8001650:	e021      	b.n	8001696 <HAL_GPIO_Init+0x2e2>
 8001652:	bf00      	nop
 8001654:	10320000 	.word	0x10320000
 8001658:	10310000 	.word	0x10310000
 800165c:	10220000 	.word	0x10220000
 8001660:	10210000 	.word	0x10210000
 8001664:	10120000 	.word	0x10120000
 8001668:	10110000 	.word	0x10110000
 800166c:	40021000 	.word	0x40021000
 8001670:	40010000 	.word	0x40010000
 8001674:	40010800 	.word	0x40010800
 8001678:	40010c00 	.word	0x40010c00
 800167c:	40011000 	.word	0x40011000
 8001680:	40011400 	.word	0x40011400
 8001684:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001688:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <HAL_GPIO_Init+0x304>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	43db      	mvns	r3, r3
 8001690:	4909      	ldr	r1, [pc, #36]	@ (80016b8 <HAL_GPIO_Init+0x304>)
 8001692:	4013      	ands	r3, r2
 8001694:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001698:	3301      	adds	r3, #1
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a2:	fa22 f303 	lsr.w	r3, r2, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f47f ae8e 	bne.w	80013c8 <HAL_GPIO_Init+0x14>
  }
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	372c      	adds	r7, #44	@ 0x2c
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	40010400 	.word	0x40010400

080016bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016cc:	787b      	ldrb	r3, [r7, #1]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016d8:	e003      	b.n	80016e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016da:	887b      	ldrh	r3, [r7, #2]
 80016dc:	041a      	lsls	r2, r3, #16
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	611a      	str	r2, [r3, #16]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80016f0:	4b03      	ldr	r3, [pc, #12]	@ (8001700 <HAL_PWR_EnableBkUpAccess+0x14>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	601a      	str	r2, [r3, #0]
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	420e0020 	.word	0x420e0020

08001704 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e272      	b.n	8001bfc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 8087 	beq.w	8001832 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001724:	4b92      	ldr	r3, [pc, #584]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	2b04      	cmp	r3, #4
 800172e:	d00c      	beq.n	800174a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001730:	4b8f      	ldr	r3, [pc, #572]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 030c 	and.w	r3, r3, #12
 8001738:	2b08      	cmp	r3, #8
 800173a:	d112      	bne.n	8001762 <HAL_RCC_OscConfig+0x5e>
 800173c:	4b8c      	ldr	r3, [pc, #560]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001748:	d10b      	bne.n	8001762 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174a:	4b89      	ldr	r3, [pc, #548]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d06c      	beq.n	8001830 <HAL_RCC_OscConfig+0x12c>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d168      	bne.n	8001830 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e24c      	b.n	8001bfc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800176a:	d106      	bne.n	800177a <HAL_RCC_OscConfig+0x76>
 800176c:	4b80      	ldr	r3, [pc, #512]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a7f      	ldr	r2, [pc, #508]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001772:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	e02e      	b.n	80017d8 <HAL_RCC_OscConfig+0xd4>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x98>
 8001782:	4b7b      	ldr	r3, [pc, #492]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a7a      	ldr	r2, [pc, #488]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b78      	ldr	r3, [pc, #480]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a77      	ldr	r2, [pc, #476]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001794:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e01d      	b.n	80017d8 <HAL_RCC_OscConfig+0xd4>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0xbc>
 80017a6:	4b72      	ldr	r3, [pc, #456]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a71      	ldr	r2, [pc, #452]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b6f      	ldr	r3, [pc, #444]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a6e      	ldr	r2, [pc, #440]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0xd4>
 80017c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a6a      	ldr	r2, [pc, #424]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b68      	ldr	r3, [pc, #416]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a67      	ldr	r2, [pc, #412]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d013      	beq.n	8001808 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fcac 	bl	800113c <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff fca8 	bl	800113c <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	@ 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e200      	b.n	8001bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0xe4>
 8001806:	e014      	b.n	8001832 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001808:	f7ff fc98 	bl	800113c <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001810:	f7ff fc94 	bl	800113c <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b64      	cmp	r3, #100	@ 0x64
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e1ec      	b.n	8001bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001822:	4b53      	ldr	r3, [pc, #332]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x10c>
 800182e:	e000      	b.n	8001832 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d063      	beq.n	8001906 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800183e:	4b4c      	ldr	r3, [pc, #304]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00b      	beq.n	8001862 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800184a:	4b49      	ldr	r3, [pc, #292]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	2b08      	cmp	r3, #8
 8001854:	d11c      	bne.n	8001890 <HAL_RCC_OscConfig+0x18c>
 8001856:	4b46      	ldr	r3, [pc, #280]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d116      	bne.n	8001890 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001862:	4b43      	ldr	r3, [pc, #268]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d005      	beq.n	800187a <HAL_RCC_OscConfig+0x176>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d001      	beq.n	800187a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e1c0      	b.n	8001bfc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187a:	4b3d      	ldr	r3, [pc, #244]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4939      	ldr	r1, [pc, #228]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 800188a:	4313      	orrs	r3, r2
 800188c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188e:	e03a      	b.n	8001906 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d020      	beq.n	80018da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001898:	4b36      	ldr	r3, [pc, #216]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7ff fc4d 	bl	800113c <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a6:	f7ff fc49 	bl	800113c <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e1a1      	b.n	8001bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4927      	ldr	r1, [pc, #156]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]
 80018d8:	e015      	b.n	8001906 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018da:	4b26      	ldr	r3, [pc, #152]	@ (8001974 <HAL_RCC_OscConfig+0x270>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fc2c 	bl	800113c <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e8:	f7ff fc28 	bl	800113c <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e180      	b.n	8001bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b00      	cmp	r3, #0
 8001910:	d03a      	beq.n	8001988 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d019      	beq.n	800194e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800191a:	4b17      	ldr	r3, [pc, #92]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 800191c:	2201      	movs	r2, #1
 800191e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001920:	f7ff fc0c 	bl	800113c <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001928:	f7ff fc08 	bl	800113c <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e160      	b.n	8001bfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193a:	4b0d      	ldr	r3, [pc, #52]	@ (8001970 <HAL_RCC_OscConfig+0x26c>)
 800193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001946:	2001      	movs	r0, #1
 8001948:	f000 faba 	bl	8001ec0 <RCC_Delay>
 800194c:	e01c      	b.n	8001988 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800194e:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001954:	f7ff fbf2 	bl	800113c <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195a:	e00f      	b.n	800197c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195c:	f7ff fbee 	bl	800113c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d908      	bls.n	800197c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e146      	b.n	8001bfc <HAL_RCC_OscConfig+0x4f8>
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	42420000 	.word	0x42420000
 8001978:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800197c:	4b92      	ldr	r3, [pc, #584]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 800197e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1e9      	bne.n	800195c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 80a6 	beq.w	8001ae2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800199a:	4b8b      	ldr	r3, [pc, #556]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10d      	bne.n	80019c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	4b88      	ldr	r3, [pc, #544]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	4a87      	ldr	r2, [pc, #540]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b0:	61d3      	str	r3, [r2, #28]
 80019b2:	4b85      	ldr	r3, [pc, #532]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019be:	2301      	movs	r3, #1
 80019c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c2:	4b82      	ldr	r3, [pc, #520]	@ (8001bcc <HAL_RCC_OscConfig+0x4c8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d118      	bne.n	8001a00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ce:	4b7f      	ldr	r3, [pc, #508]	@ (8001bcc <HAL_RCC_OscConfig+0x4c8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a7e      	ldr	r2, [pc, #504]	@ (8001bcc <HAL_RCC_OscConfig+0x4c8>)
 80019d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019da:	f7ff fbaf 	bl	800113c <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e2:	f7ff fbab 	bl	800113c <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b64      	cmp	r3, #100	@ 0x64
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e103      	b.n	8001bfc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f4:	4b75      	ldr	r3, [pc, #468]	@ (8001bcc <HAL_RCC_OscConfig+0x4c8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d106      	bne.n	8001a16 <HAL_RCC_OscConfig+0x312>
 8001a08:	4b6f      	ldr	r3, [pc, #444]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	4a6e      	ldr	r2, [pc, #440]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6213      	str	r3, [r2, #32]
 8001a14:	e02d      	b.n	8001a72 <HAL_RCC_OscConfig+0x36e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x334>
 8001a1e:	4b6a      	ldr	r3, [pc, #424]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	4a69      	ldr	r2, [pc, #420]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	6213      	str	r3, [r2, #32]
 8001a2a:	4b67      	ldr	r3, [pc, #412]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	4a66      	ldr	r2, [pc, #408]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	f023 0304 	bic.w	r3, r3, #4
 8001a34:	6213      	str	r3, [r2, #32]
 8001a36:	e01c      	b.n	8001a72 <HAL_RCC_OscConfig+0x36e>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	2b05      	cmp	r3, #5
 8001a3e:	d10c      	bne.n	8001a5a <HAL_RCC_OscConfig+0x356>
 8001a40:	4b61      	ldr	r3, [pc, #388]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4a60      	ldr	r2, [pc, #384]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	6213      	str	r3, [r2, #32]
 8001a4c:	4b5e      	ldr	r3, [pc, #376]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	4a5d      	ldr	r2, [pc, #372]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6213      	str	r3, [r2, #32]
 8001a58:	e00b      	b.n	8001a72 <HAL_RCC_OscConfig+0x36e>
 8001a5a:	4b5b      	ldr	r3, [pc, #364]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	4a5a      	ldr	r2, [pc, #360]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	f023 0301 	bic.w	r3, r3, #1
 8001a64:	6213      	str	r3, [r2, #32]
 8001a66:	4b58      	ldr	r3, [pc, #352]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	4a57      	ldr	r2, [pc, #348]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	f023 0304 	bic.w	r3, r3, #4
 8001a70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d015      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fb5f 	bl	800113c <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a80:	e00a      	b.n	8001a98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a82:	f7ff fb5b 	bl	800113c <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e0b1      	b.n	8001bfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a98:	4b4b      	ldr	r3, [pc, #300]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0ee      	beq.n	8001a82 <HAL_RCC_OscConfig+0x37e>
 8001aa4:	e014      	b.n	8001ad0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff fb49 	bl	800113c <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aac:	e00a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aae:	f7ff fb45 	bl	800113c <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e09b      	b.n	8001bfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac4:	4b40      	ldr	r3, [pc, #256]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1ee      	bne.n	8001aae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ad0:	7dfb      	ldrb	r3, [r7, #23]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d105      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad6:	4b3c      	ldr	r3, [pc, #240]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a3b      	ldr	r2, [pc, #236]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ae0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 8087 	beq.w	8001bfa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aec:	4b36      	ldr	r3, [pc, #216]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 030c 	and.w	r3, r3, #12
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d061      	beq.n	8001bbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d146      	bne.n	8001b8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b00:	4b33      	ldr	r3, [pc, #204]	@ (8001bd0 <HAL_RCC_OscConfig+0x4cc>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b06:	f7ff fb19 	bl	800113c <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0e:	f7ff fb15 	bl	800113c <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e06d      	b.n	8001bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b20:	4b29      	ldr	r3, [pc, #164]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f0      	bne.n	8001b0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b34:	d108      	bne.n	8001b48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b36:	4b24      	ldr	r3, [pc, #144]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	4921      	ldr	r1, [pc, #132]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b48:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a19      	ldr	r1, [r3, #32]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b58:	430b      	orrs	r3, r1
 8001b5a:	491b      	ldr	r1, [pc, #108]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b60:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd0 <HAL_RCC_OscConfig+0x4cc>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7ff fae9 	bl	800113c <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7ff fae5 	bl	800113c <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e03d      	b.n	8001bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x46a>
 8001b8c:	e035      	b.n	8001bfa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <HAL_RCC_OscConfig+0x4cc>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff fad2 	bl	800113c <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7ff face 	bl	800113c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e026      	b.n	8001bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bae:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x498>
 8001bba:	e01e      	b.n	8001bfa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d107      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e019      	b.n	8001bfc <HAL_RCC_OscConfig+0x4f8>
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40007000 	.word	0x40007000
 8001bd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <HAL_RCC_OscConfig+0x500>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d106      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d001      	beq.n	8001bfa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000

08001c08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0d0      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b6a      	ldr	r3, [pc, #424]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d910      	bls.n	8001c4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b67      	ldr	r3, [pc, #412]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 0207 	bic.w	r2, r3, #7
 8001c32:	4965      	ldr	r1, [pc, #404]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b63      	ldr	r3, [pc, #396]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0b8      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d020      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c64:	4b59      	ldr	r3, [pc, #356]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	4a58      	ldr	r2, [pc, #352]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c7c:	4b53      	ldr	r3, [pc, #332]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4a52      	ldr	r2, [pc, #328]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c88:	4b50      	ldr	r3, [pc, #320]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	494d      	ldr	r1, [pc, #308]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d040      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d107      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	4b47      	ldr	r3, [pc, #284]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d115      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e07f      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d107      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc6:	4b41      	ldr	r3, [pc, #260]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d109      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e073      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd6:	4b3d      	ldr	r3, [pc, #244]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e06b      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ce6:	4b39      	ldr	r3, [pc, #228]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f023 0203 	bic.w	r2, r3, #3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	4936      	ldr	r1, [pc, #216]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf8:	f7ff fa20 	bl	800113c <HAL_GetTick>
 8001cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d00:	f7ff fa1c 	bl	800113c <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e053      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d16:	4b2d      	ldr	r3, [pc, #180]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 020c 	and.w	r2, r3, #12
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d1eb      	bne.n	8001d00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d28:	4b27      	ldr	r3, [pc, #156]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d210      	bcs.n	8001d58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d36:	4b24      	ldr	r3, [pc, #144]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 0207 	bic.w	r2, r3, #7
 8001d3e:	4922      	ldr	r1, [pc, #136]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d46:	4b20      	ldr	r3, [pc, #128]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e032      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d64:	4b19      	ldr	r3, [pc, #100]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	4916      	ldr	r1, [pc, #88]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d82:	4b12      	ldr	r3, [pc, #72]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	490e      	ldr	r1, [pc, #56]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d96:	f000 f821 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	490a      	ldr	r1, [pc, #40]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001da8:	5ccb      	ldrb	r3, [r1, r3]
 8001daa:	fa22 f303 	lsr.w	r3, r2, r3
 8001dae:	4a09      	ldr	r2, [pc, #36]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1cc>)
 8001db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001db2:	4b09      	ldr	r3, [pc, #36]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1d0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff f97e 	bl	80010b8 <HAL_InitTick>

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40022000 	.word	0x40022000
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	08005210 	.word	0x08005210
 8001dd4:	20000010 	.word	0x20000010
 8001dd8:	20000014 	.word	0x20000014

08001ddc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	2300      	movs	r3, #0
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001df6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x94>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d002      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x30>
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d003      	beq.n	8001e12 <HAL_RCC_GetSysClockFreq+0x36>
 8001e0a:	e027      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e0c:	4b19      	ldr	r3, [pc, #100]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e0e:	613b      	str	r3, [r7, #16]
      break;
 8001e10:	e027      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	0c9b      	lsrs	r3, r3, #18
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	4a17      	ldr	r2, [pc, #92]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e1c:	5cd3      	ldrb	r3, [r2, r3]
 8001e1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d010      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e2a:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	0c5b      	lsrs	r3, r3, #17
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	4a11      	ldr	r2, [pc, #68]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e36:	5cd3      	ldrb	r3, [r2, r3]
 8001e38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e3e:	fb03 f202 	mul.w	r2, r3, r2
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	e004      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e50:	fb02 f303 	mul.w	r3, r2, r3
 8001e54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	613b      	str	r3, [r7, #16]
      break;
 8001e5a:	e002      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e5c:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e5e:	613b      	str	r3, [r7, #16]
      break;
 8001e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e62:	693b      	ldr	r3, [r7, #16]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	371c      	adds	r7, #28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	007a1200 	.word	0x007a1200
 8001e78:	08005228 	.word	0x08005228
 8001e7c:	08005238 	.word	0x08005238
 8001e80:	003d0900 	.word	0x003d0900

08001e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e88:	4b02      	ldr	r3, [pc, #8]	@ (8001e94 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr
 8001e94:	20000010 	.word	0x20000010

08001e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e9c:	f7ff fff2 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	0adb      	lsrs	r3, r3, #11
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	4903      	ldr	r1, [pc, #12]	@ (8001ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eae:	5ccb      	ldrb	r3, [r1, r3]
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	08005220 	.word	0x08005220

08001ec0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <RCC_Delay+0x34>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef8 <RCC_Delay+0x38>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	0a5b      	lsrs	r3, r3, #9
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
 8001eda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001edc:	bf00      	nop
  }
  while (Delay --);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1e5a      	subs	r2, r3, #1
 8001ee2:	60fa      	str	r2, [r7, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f9      	bne.n	8001edc <RCC_Delay+0x1c>
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	20000010 	.word	0x20000010
 8001ef8:	10624dd3 	.word	0x10624dd3

08001efc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d07d      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1c:	4b4f      	ldr	r3, [pc, #316]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10d      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f28:	4b4c      	ldr	r3, [pc, #304]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	4a4b      	ldr	r2, [pc, #300]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f32:	61d3      	str	r3, [r2, #28]
 8001f34:	4b49      	ldr	r3, [pc, #292]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f40:	2301      	movs	r3, #1
 8001f42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	4b46      	ldr	r3, [pc, #280]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d118      	bne.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f50:	4b43      	ldr	r3, [pc, #268]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a42      	ldr	r2, [pc, #264]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5c:	f7ff f8ee 	bl	800113c <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f62:	e008      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f64:	f7ff f8ea 	bl	800113c <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	@ 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e06d      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f76:	4b3a      	ldr	r3, [pc, #232]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f82:	4b36      	ldr	r3, [pc, #216]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d02e      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d027      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fa8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001faa:	4b2e      	ldr	r3, [pc, #184]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fb0:	4b2c      	ldr	r3, [pc, #176]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fb6:	4a29      	ldr	r2, [pc, #164]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d014      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7ff f8b9 	bl	800113c <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fcc:	e00a      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f7ff f8b5 	bl	800113c <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e036      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0ee      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4917      	ldr	r1, [pc, #92]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002002:	7dfb      	ldrb	r3, [r7, #23]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d105      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002008:	4b14      	ldr	r3, [pc, #80]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	4a13      	ldr	r2, [pc, #76]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800200e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002012:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002020:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	490b      	ldr	r1, [pc, #44]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	d008      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800203e:	4b07      	ldr	r3, [pc, #28]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	4904      	ldr	r1, [pc, #16]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000
 8002060:	40007000 	.word	0x40007000
 8002064:	42420440 	.word	0x42420440

08002068 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	2300      	movs	r3, #0
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	2300      	movs	r3, #0
 800207a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	2300      	movs	r3, #0
 8002082:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b10      	cmp	r3, #16
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b10      	cmp	r3, #16
 800208e:	f200 808a 	bhi.w	80021a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d045      	beq.n	8002124 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d075      	beq.n	800218a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800209e:	e082      	b.n	80021a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80020a0:	4b46      	ldr	r3, [pc, #280]	@ (80021bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80020a6:	4b45      	ldr	r3, [pc, #276]	@ (80021bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d07b      	beq.n	80021aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	0c9b      	lsrs	r3, r3, #18
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	4a41      	ldr	r2, [pc, #260]	@ (80021c0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80020bc:	5cd3      	ldrb	r3, [r2, r3]
 80020be:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d015      	beq.n	80020f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020ca:	4b3c      	ldr	r3, [pc, #240]	@ (80021bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	0c5b      	lsrs	r3, r3, #17
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	4a3b      	ldr	r2, [pc, #236]	@ (80021c4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80020d6:	5cd3      	ldrb	r3, [r2, r3]
 80020d8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00d      	beq.n	8002100 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80020e4:	4a38      	ldr	r2, [pc, #224]	@ (80021c8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	fb02 f303 	mul.w	r3, r2, r3
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	e004      	b.n	8002100 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4a34      	ldr	r2, [pc, #208]	@ (80021cc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80020fa:	fb02 f303 	mul.w	r3, r2, r3
 80020fe:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002100:	4b2e      	ldr	r3, [pc, #184]	@ (80021bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002108:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800210c:	d102      	bne.n	8002114 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	61bb      	str	r3, [r7, #24]
      break;
 8002112:	e04a      	b.n	80021aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4a2d      	ldr	r2, [pc, #180]	@ (80021d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	085b      	lsrs	r3, r3, #1
 8002120:	61bb      	str	r3, [r7, #24]
      break;
 8002122:	e042      	b.n	80021aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002124:	4b25      	ldr	r3, [pc, #148]	@ (80021bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002134:	d108      	bne.n	8002148 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002140:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002144:	61bb      	str	r3, [r7, #24]
 8002146:	e01f      	b.n	8002188 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800214e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002152:	d109      	bne.n	8002168 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002154:	4b19      	ldr	r3, [pc, #100]	@ (80021bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002160:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	e00f      	b.n	8002188 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800216e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002172:	d11c      	bne.n	80021ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002174:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d016      	beq.n	80021ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002180:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002184:	61bb      	str	r3, [r7, #24]
      break;
 8002186:	e012      	b.n	80021ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002188:	e011      	b.n	80021ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800218a:	f7ff fe85 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 800218e:	4602      	mov	r2, r0
 8002190:	4b0a      	ldr	r3, [pc, #40]	@ (80021bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	0b9b      	lsrs	r3, r3, #14
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	3301      	adds	r3, #1
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	61bb      	str	r3, [r7, #24]
      break;
 80021a4:	e004      	b.n	80021b0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80021a6:	bf00      	nop
 80021a8:	e002      	b.n	80021b0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80021aa:	bf00      	nop
 80021ac:	e000      	b.n	80021b0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80021ae:	bf00      	nop
    }
  }
  return (frequency);
 80021b0:	69bb      	ldr	r3, [r7, #24]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3720      	adds	r7, #32
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	0800523c 	.word	0x0800523c
 80021c4:	0800524c 	.word	0x0800524c
 80021c8:	007a1200 	.word	0x007a1200
 80021cc:	003d0900 	.word	0x003d0900
 80021d0:	aaaaaaab 	.word	0xaaaaaaab

080021d4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e07a      	b.n	80022e0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	7c5b      	ldrb	r3, [r3, #17]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d105      	bne.n	8002200 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7fe fe38 	bl	8000e70 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fb1d 	bl	8002846 <HAL_RTC_WaitForSynchro>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d004      	beq.n	800221c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2204      	movs	r2, #4
 8002216:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e061      	b.n	80022e0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 fbd6 	bl	80029ce <RTC_EnterInitMode>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d004      	beq.n	8002232 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2204      	movs	r2, #4
 800222c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e056      	b.n	80022e0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0207 	bic.w	r2, r2, #7
 8002240:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800224a:	4b27      	ldr	r3, [pc, #156]	@ (80022e8 <HAL_RTC_Init+0x114>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	4a26      	ldr	r2, [pc, #152]	@ (80022e8 <HAL_RTC_Init+0x114>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002256:	4b24      	ldr	r3, [pc, #144]	@ (80022e8 <HAL_RTC_Init+0x114>)
 8002258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225a:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	4921      	ldr	r1, [pc, #132]	@ (80022e8 <HAL_RTC_Init+0x114>)
 8002264:	4313      	orrs	r3, r2
 8002266:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002270:	d003      	beq.n	800227a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e00e      	b.n	8002298 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800227a:	2001      	movs	r0, #1
 800227c:	f7ff fef4 	bl	8002068 <HAL_RCCEx_GetPeriphCLKFreq>
 8002280:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d104      	bne.n	8002292 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2204      	movs	r2, #4
 800228c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e026      	b.n	80022e0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	3b01      	subs	r3, #1
 8002296:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	0c1a      	lsrs	r2, r3, #16
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f002 020f 	and.w	r2, r2, #15
 80022a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	b292      	uxth	r2, r2
 80022ae:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 fbb4 	bl	8002a1e <RTC_ExitInitMode>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d004      	beq.n	80022c6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2204      	movs	r2, #4
 80022c0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e00c      	b.n	80022e0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80022de:	2300      	movs	r3, #0
  }
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40006c00 	.word	0x40006c00

080022ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	2300      	movs	r3, #0
 80022fe:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <HAL_RTC_SetTime+0x20>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e080      	b.n	8002412 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	7c1b      	ldrb	r3, [r3, #16]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_RTC_SetTime+0x30>
 8002318:	2302      	movs	r3, #2
 800231a:	e07a      	b.n	8002412 <HAL_RTC_SetTime+0x126>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2202      	movs	r2, #2
 8002326:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d113      	bne.n	8002356 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002338:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	785b      	ldrb	r3, [r3, #1]
 8002340:	4619      	mov	r1, r3
 8002342:	460b      	mov	r3, r1
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	1a5b      	subs	r3, r3, r1
 8002348:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800234a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002350:	4413      	add	r3, r2
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	e01e      	b.n	8002394 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f000 fba4 	bl	8002aa8 <RTC_Bcd2ToByte>
 8002360:	4603      	mov	r3, r0
 8002362:	461a      	mov	r2, r3
 8002364:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002368:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	785b      	ldrb	r3, [r3, #1]
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fb99 	bl	8002aa8 <RTC_Bcd2ToByte>
 8002376:	4603      	mov	r3, r0
 8002378:	461a      	mov	r2, r3
 800237a:	4613      	mov	r3, r2
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002382:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	789b      	ldrb	r3, [r3, #2]
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fb8d 	bl	8002aa8 <RTC_Bcd2ToByte>
 800238e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002390:	4423      	add	r3, r4
 8002392:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002394:	6979      	ldr	r1, [r7, #20]
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 fab2 	bl	8002900 <RTC_WriteTimeCounter>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d007      	beq.n	80023b2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2204      	movs	r2, #4
 80023a6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e02f      	b.n	8002412 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0205 	bic.w	r2, r2, #5
 80023c0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 fac3 	bl	800294e <RTC_ReadAlarmCounter>
 80023c8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d0:	d018      	beq.n	8002404 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d214      	bcs.n	8002404 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80023e0:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80023e4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80023e6:	6939      	ldr	r1, [r7, #16]
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 fac9 	bl	8002980 <RTC_WriteAlarmCounter>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d007      	beq.n	8002404 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2204      	movs	r2, #4
 80023f8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e006      	b.n	8002412 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2201      	movs	r2, #1
 8002408:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002410:	2300      	movs	r3, #0
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	371c      	adds	r7, #28
 8002416:	46bd      	mov	sp, r7
 8002418:	bd90      	pop	{r4, r7, pc}
	...

0800241c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	61bb      	str	r3, [r7, #24]
 800242c:	2300      	movs	r3, #0
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	2300      	movs	r3, #0
 8002436:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <HAL_RTC_GetTime+0x28>
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0b5      	b.n	80025b4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e0ac      	b.n	80025b4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fa20 	bl	80028a0 <RTC_ReadTimeCounter>
 8002460:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	4a55      	ldr	r2, [pc, #340]	@ (80025bc <HAL_RTC_GetTime+0x1a0>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	0adb      	lsrs	r3, r3, #11
 800246c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4b52      	ldr	r3, [pc, #328]	@ (80025bc <HAL_RTC_GetTime+0x1a0>)
 8002472:	fba3 1302 	umull	r1, r3, r3, r2
 8002476:	0adb      	lsrs	r3, r3, #11
 8002478:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	4a4f      	ldr	r2, [pc, #316]	@ (80025c0 <HAL_RTC_GetTime+0x1a4>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	095b      	lsrs	r3, r3, #5
 800248a:	b2da      	uxtb	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	4a4a      	ldr	r2, [pc, #296]	@ (80025bc <HAL_RTC_GetTime+0x1a0>)
 8002494:	fba2 1203 	umull	r1, r2, r2, r3
 8002498:	0ad2      	lsrs	r2, r2, #11
 800249a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800249e:	fb01 f202 	mul.w	r2, r1, r2
 80024a2:	1a9a      	subs	r2, r3, r2
 80024a4:	4b46      	ldr	r3, [pc, #280]	@ (80025c0 <HAL_RTC_GetTime+0x1a4>)
 80024a6:	fba3 1302 	umull	r1, r3, r3, r2
 80024aa:	0959      	lsrs	r1, r3, #5
 80024ac:	460b      	mov	r3, r1
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	1a5b      	subs	r3, r3, r1
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	1ad1      	subs	r1, r2, r3
 80024b6:	b2ca      	uxtb	r2, r1
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b17      	cmp	r3, #23
 80024c0:	d955      	bls.n	800256e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4a3f      	ldr	r2, [pc, #252]	@ (80025c4 <HAL_RTC_GetTime+0x1a8>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	091b      	lsrs	r3, r3, #4
 80024cc:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80024ce:	6939      	ldr	r1, [r7, #16]
 80024d0:	4b3c      	ldr	r3, [pc, #240]	@ (80025c4 <HAL_RTC_GetTime+0x1a8>)
 80024d2:	fba3 2301 	umull	r2, r3, r3, r1
 80024d6:	091a      	lsrs	r2, r3, #4
 80024d8:	4613      	mov	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	1aca      	subs	r2, r1, r3
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 fa30 	bl	800294e <RTC_ReadAlarmCounter>
 80024ee:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f6:	d008      	beq.n	800250a <HAL_RTC_GetTime+0xee>
 80024f8:	69fa      	ldr	r2, [r7, #28]
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d904      	bls.n	800250a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002500:	69fa      	ldr	r2, [r7, #28]
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	e002      	b.n	8002510 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295
 800250e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	4a2d      	ldr	r2, [pc, #180]	@ (80025c8 <HAL_RTC_GetTime+0x1ac>)
 8002514:	fb02 f303 	mul.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800251e:	69b9      	ldr	r1, [r7, #24]
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f9ed 	bl	8002900 <RTC_WriteTimeCounter>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e041      	b.n	80025b4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002536:	d00c      	beq.n	8002552 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	4413      	add	r3, r2
 800253e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002540:	69f9      	ldr	r1, [r7, #28]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 fa1c 	bl	8002980 <RTC_WriteAlarmCounter>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e030      	b.n	80025b4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002552:	69f9      	ldr	r1, [r7, #28]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fa13 	bl	8002980 <RTC_WriteAlarmCounter>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e027      	b.n	80025b4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002564:	6979      	ldr	r1, [r7, #20]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fabb 	bl	8002ae2 <RTC_DateUpdate>
 800256c:	e003      	b.n	8002576 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01a      	beq.n	80025b2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f000 fa74 	bl	8002a6e <RTC_ByteToBcd2>
 8002586:	4603      	mov	r3, r0
 8002588:	461a      	mov	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	785b      	ldrb	r3, [r3, #1]
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fa6b 	bl	8002a6e <RTC_ByteToBcd2>
 8002598:	4603      	mov	r3, r0
 800259a:	461a      	mov	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	789b      	ldrb	r3, [r3, #2]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 fa62 	bl	8002a6e <RTC_ByteToBcd2>
 80025aa:	4603      	mov	r3, r0
 80025ac:	461a      	mov	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3720      	adds	r7, #32
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	91a2b3c5 	.word	0x91a2b3c5
 80025c0:	88888889 	.word	0x88888889
 80025c4:	aaaaaaab 	.word	0xaaaaaaab
 80025c8:	00015180 	.word	0x00015180

080025cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	2300      	movs	r3, #0
 80025de:	61bb      	str	r3, [r7, #24]
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <HAL_RTC_SetDate+0x24>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e097      	b.n	8002724 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	7c1b      	ldrb	r3, [r3, #16]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_RTC_SetDate+0x34>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e091      	b.n	8002724 <HAL_RTC_SetDate+0x158>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2201      	movs	r2, #1
 8002604:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2202      	movs	r2, #2
 800260a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10c      	bne.n	800262c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	78da      	ldrb	r2, [r3, #3]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	785a      	ldrb	r2, [r3, #1]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	789a      	ldrb	r2, [r3, #2]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	739a      	strb	r2, [r3, #14]
 800262a:	e01a      	b.n	8002662 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	78db      	ldrb	r3, [r3, #3]
 8002630:	4618      	mov	r0, r3
 8002632:	f000 fa39 	bl	8002aa8 <RTC_Bcd2ToByte>
 8002636:	4603      	mov	r3, r0
 8002638:	461a      	mov	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	785b      	ldrb	r3, [r3, #1]
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fa30 	bl	8002aa8 <RTC_Bcd2ToByte>
 8002648:	4603      	mov	r3, r0
 800264a:	461a      	mov	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	789b      	ldrb	r3, [r3, #2]
 8002654:	4618      	mov	r0, r3
 8002656:	f000 fa27 	bl	8002aa8 <RTC_Bcd2ToByte>
 800265a:	4603      	mov	r3, r0
 800265c:	461a      	mov	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	7bdb      	ldrb	r3, [r3, #15]
 8002666:	4618      	mov	r0, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	7b59      	ldrb	r1, [r3, #13]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	7b9b      	ldrb	r3, [r3, #14]
 8002670:	461a      	mov	r2, r3
 8002672:	f000 fb11 	bl	8002c98 <RTC_WeekDayNum>
 8002676:	4603      	mov	r3, r0
 8002678:	461a      	mov	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	7b1a      	ldrb	r2, [r3, #12]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 f90a 	bl	80028a0 <RTC_ReadTimeCounter>
 800268c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	4a26      	ldr	r2, [pc, #152]	@ (800272c <HAL_RTC_SetDate+0x160>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	0adb      	lsrs	r3, r3, #11
 8002698:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b18      	cmp	r3, #24
 800269e:	d93a      	bls.n	8002716 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	4a23      	ldr	r2, [pc, #140]	@ (8002730 <HAL_RTC_SetDate+0x164>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	4a22      	ldr	r2, [pc, #136]	@ (8002734 <HAL_RTC_SetDate+0x168>)
 80026ac:	fb02 f303 	mul.w	r3, r2, r3
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80026b6:	69f9      	ldr	r1, [r7, #28]
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 f921 	bl	8002900 <RTC_WriteTimeCounter>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d007      	beq.n	80026d4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2204      	movs	r2, #4
 80026c8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e027      	b.n	8002724 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 f93a 	bl	800294e <RTC_ReadAlarmCounter>
 80026da:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e2:	d018      	beq.n	8002716 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d214      	bcs.n	8002716 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80026f2:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80026f6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80026f8:	69b9      	ldr	r1, [r7, #24]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 f940 	bl	8002980 <RTC_WriteAlarmCounter>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d007      	beq.n	8002716 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2204      	movs	r2, #4
 800270a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e006      	b.n	8002724 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3720      	adds	r7, #32
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	91a2b3c5 	.word	0x91a2b3c5
 8002730:	aaaaaaab 	.word	0xaaaaaaab
 8002734:	00015180 	.word	0x00015180

08002738 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8002744:	f107 0314 	add.w	r3, r7, #20
 8002748:	2100      	movs	r1, #0
 800274a:	460a      	mov	r2, r1
 800274c:	801a      	strh	r2, [r3, #0]
 800274e:	460a      	mov	r2, r1
 8002750:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d002      	beq.n	800275e <HAL_RTC_GetDate+0x26>
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e03a      	b.n	80027d8 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002762:	f107 0314 	add.w	r3, r7, #20
 8002766:	2200      	movs	r2, #0
 8002768:	4619      	mov	r1, r3
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f7ff fe56 	bl	800241c <HAL_RTC_GetTime>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e02e      	b.n	80027d8 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	7b1a      	ldrb	r2, [r3, #12]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	7bda      	ldrb	r2, [r3, #15]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	7b5a      	ldrb	r2, [r3, #13]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	7b9a      	ldrb	r2, [r3, #14]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d01a      	beq.n	80027d6 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	78db      	ldrb	r3, [r3, #3]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 f962 	bl	8002a6e <RTC_ByteToBcd2>
 80027aa:	4603      	mov	r3, r0
 80027ac:	461a      	mov	r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	785b      	ldrb	r3, [r3, #1]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 f959 	bl	8002a6e <RTC_ByteToBcd2>
 80027bc:	4603      	mov	r3, r0
 80027be:	461a      	mov	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	789b      	ldrb	r3, [r3, #2]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 f950 	bl	8002a6e <RTC_ByteToBcd2>
 80027ce:	4603      	mov	r3, r0
 80027d0:	461a      	mov	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d011      	beq.n	800281a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f815 	bl	8002834 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0202 	bic.w	r2, r2, #2
 8002818:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800281a:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <HAL_RTC_AlarmIRQHandler+0x50>)
 800281c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002820:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	745a      	strb	r2, [r3, #17]
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40010400 	.word	0x40010400

08002834 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr

08002846 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e01d      	b.n	8002898 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0208 	bic.w	r2, r2, #8
 800286a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800286c:	f7fe fc66 	bl	800113c <HAL_GetTick>
 8002870:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002872:	e009      	b.n	8002888 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002874:	f7fe fc62 	bl	800113c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002882:	d901      	bls.n	8002888 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e007      	b.n	8002898 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0ee      	beq.n	8002874 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	827b      	strh	r3, [r7, #18]
 80028ac:	2300      	movs	r3, #0
 80028ae:	823b      	strh	r3, [r7, #16]
 80028b0:	2300      	movs	r3, #0
 80028b2:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80028d0:	8a7a      	ldrh	r2, [r7, #18]
 80028d2:	8a3b      	ldrh	r3, [r7, #16]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d008      	beq.n	80028ea <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80028d8:	8a3b      	ldrh	r3, [r7, #16]
 80028da:	041a      	lsls	r2, r3, #16
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	4313      	orrs	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	e004      	b.n	80028f4 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80028ea:	8a7b      	ldrh	r3, [r7, #18]
 80028ec:	041a      	lsls	r2, r3, #16
 80028ee:	89fb      	ldrh	r3, [r7, #14]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80028f4:	697b      	ldr	r3, [r7, #20]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	371c      	adds	r7, #28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f85d 	bl	80029ce <RTC_EnterInitMode>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
 800291e:	e011      	b.n	8002944 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	0c12      	lsrs	r2, r2, #16
 8002928:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	b292      	uxth	r2, r2
 8002932:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f872 	bl	8002a1e <RTC_ExitInitMode>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002944:	7bfb      	ldrb	r3, [r7, #15]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800294e:	b480      	push	{r7}
 8002950:	b085      	sub	sp, #20
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	81fb      	strh	r3, [r7, #14]
 800295a:	2300      	movs	r3, #0
 800295c:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800296e:	89fb      	ldrh	r3, [r7, #14]
 8002970:	041a      	lsls	r2, r3, #16
 8002972:	89bb      	ldrh	r3, [r7, #12]
 8002974:	4313      	orrs	r3, r2
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f81d 	bl	80029ce <RTC_EnterInitMode>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
 800299e:	e011      	b.n	80029c4 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	0c12      	lsrs	r2, r2, #16
 80029a8:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	b292      	uxth	r2, r2
 80029b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f832 	bl	8002a1e <RTC_ExitInitMode>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80029da:	f7fe fbaf 	bl	800113c <HAL_GetTick>
 80029de:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80029e0:	e009      	b.n	80029f6 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80029e2:	f7fe fbab 	bl	800113c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029f0:	d901      	bls.n	80029f6 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e00f      	b.n	8002a16 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0ee      	beq.n	80029e2 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0210 	orr.w	r2, r2, #16
 8002a12:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0210 	bic.w	r2, r2, #16
 8002a38:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002a3a:	f7fe fb7f 	bl	800113c <HAL_GetTick>
 8002a3e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002a40:	e009      	b.n	8002a56 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002a42:	f7fe fb7b 	bl	800113c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a50:	d901      	bls.n	8002a56 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e007      	b.n	8002a66 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0ee      	beq.n	8002a42 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b085      	sub	sp, #20
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	4603      	mov	r3, r0
 8002a76:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002a7c:	e005      	b.n	8002a8a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	3301      	adds	r3, #1
 8002a82:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	3b0a      	subs	r3, #10
 8002a88:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	2b09      	cmp	r3, #9
 8002a8e:	d8f6      	bhi.n	8002a7e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	b2db      	uxtb	r3, r3
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	461a      	mov	r2, r3
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	b2db      	uxtb	r3, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr

08002ae2 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b086      	sub	sp, #24
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	2300      	movs	r3, #0
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	2300      	movs	r3, #0
 8002af6:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	7bdb      	ldrb	r3, [r3, #15]
 8002b00:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	7b5b      	ldrb	r3, [r3, #13]
 8002b06:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7b9b      	ldrb	r3, [r3, #14]
 8002b0c:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	e06f      	b.n	8002bf4 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d011      	beq.n	8002b3e <RTC_DateUpdate+0x5c>
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d00e      	beq.n	8002b3e <RTC_DateUpdate+0x5c>
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	d00b      	beq.n	8002b3e <RTC_DateUpdate+0x5c>
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	2b07      	cmp	r3, #7
 8002b2a:	d008      	beq.n	8002b3e <RTC_DateUpdate+0x5c>
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d005      	beq.n	8002b3e <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	2b0a      	cmp	r3, #10
 8002b36:	d002      	beq.n	8002b3e <RTC_DateUpdate+0x5c>
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	2b0c      	cmp	r3, #12
 8002b3c:	d117      	bne.n	8002b6e <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b1e      	cmp	r3, #30
 8002b42:	d803      	bhi.n	8002b4c <RTC_DateUpdate+0x6a>
      {
        day++;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	3301      	adds	r3, #1
 8002b48:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002b4a:	e050      	b.n	8002bee <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	2b0c      	cmp	r3, #12
 8002b50:	d005      	beq.n	8002b5e <RTC_DateUpdate+0x7c>
        {
          month++;
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	3301      	adds	r3, #1
 8002b56:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002b5c:	e047      	b.n	8002bee <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002b62:	2301      	movs	r3, #1
 8002b64:	60fb      	str	r3, [r7, #12]
          year++;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002b6c:	e03f      	b.n	8002bee <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d008      	beq.n	8002b86 <RTC_DateUpdate+0xa4>
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	2b06      	cmp	r3, #6
 8002b78:	d005      	beq.n	8002b86 <RTC_DateUpdate+0xa4>
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b09      	cmp	r3, #9
 8002b7e:	d002      	beq.n	8002b86 <RTC_DateUpdate+0xa4>
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	2b0b      	cmp	r3, #11
 8002b84:	d10c      	bne.n	8002ba0 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b1d      	cmp	r3, #29
 8002b8a:	d803      	bhi.n	8002b94 <RTC_DateUpdate+0xb2>
      {
        day++;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002b92:	e02c      	b.n	8002bee <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	3301      	adds	r3, #1
 8002b98:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002b9e:	e026      	b.n	8002bee <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d123      	bne.n	8002bee <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b1b      	cmp	r3, #27
 8002baa:	d803      	bhi.n	8002bb4 <RTC_DateUpdate+0xd2>
      {
        day++;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	e01c      	b.n	8002bee <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b1c      	cmp	r3, #28
 8002bb8:	d111      	bne.n	8002bde <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f838 	bl	8002c34 <RTC_IsLeapYear>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <RTC_DateUpdate+0xf0>
        {
          day++;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	e00d      	b.n	8002bee <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	e007      	b.n	8002bee <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b1d      	cmp	r3, #29
 8002be2:	d104      	bne.n	8002bee <RTC_DateUpdate+0x10c>
      {
        month++;
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	3301      	adds	r3, #1
 8002be8:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002bea:	2301      	movs	r3, #1
 8002bec:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d38b      	bcc.n	8002b14 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	6978      	ldr	r0, [r7, #20]
 8002c20:	f000 f83a 	bl	8002c98 <RTC_WeekDayNum>
 8002c24:	4603      	mov	r3, r0
 8002c26:	461a      	mov	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	731a      	strb	r2, [r3, #12]
}
 8002c2c:	bf00      	nop
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	e01d      	b.n	8002c8a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	4a10      	ldr	r2, [pc, #64]	@ (8002c94 <RTC_IsLeapYear+0x60>)
 8002c52:	fba2 1203 	umull	r1, r2, r2, r3
 8002c56:	0952      	lsrs	r2, r2, #5
 8002c58:	2164      	movs	r1, #100	@ 0x64
 8002c5a:	fb01 f202 	mul.w	r2, r1, r2
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e00f      	b.n	8002c8a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	4a09      	ldr	r2, [pc, #36]	@ (8002c94 <RTC_IsLeapYear+0x60>)
 8002c6e:	fba2 1203 	umull	r1, r2, r2, r3
 8002c72:	09d2      	lsrs	r2, r2, #7
 8002c74:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002c78:	fb01 f202 	mul.w	r2, r1, r2
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002c88:	2300      	movs	r3, #0
  }
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	51eb851f 	.word	0x51eb851f

08002c98 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	70fb      	strb	r3, [r7, #3]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002cb6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d82d      	bhi.n	8002d1a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	4a2c      	ldr	r2, [pc, #176]	@ (8002d7c <RTC_WeekDayNum+0xe4>)
 8002ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd0:	085a      	lsrs	r2, r3, #1
 8002cd2:	78bb      	ldrb	r3, [r7, #2]
 8002cd4:	441a      	add	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	441a      	add	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	089b      	lsrs	r3, r3, #2
 8002ce0:	441a      	add	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	4926      	ldr	r1, [pc, #152]	@ (8002d80 <RTC_WeekDayNum+0xe8>)
 8002ce8:	fba1 1303 	umull	r1, r3, r1, r3
 8002cec:	095b      	lsrs	r3, r3, #5
 8002cee:	1ad2      	subs	r2, r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	4922      	ldr	r1, [pc, #136]	@ (8002d80 <RTC_WeekDayNum+0xe8>)
 8002cf6:	fba1 1303 	umull	r1, r3, r1, r3
 8002cfa:	09db      	lsrs	r3, r3, #7
 8002cfc:	4413      	add	r3, r2
 8002cfe:	1d1a      	adds	r2, r3, #4
 8002d00:	4b20      	ldr	r3, [pc, #128]	@ (8002d84 <RTC_WeekDayNum+0xec>)
 8002d02:	fba3 1302 	umull	r1, r3, r3, r2
 8002d06:	1ad1      	subs	r1, r2, r3
 8002d08:	0849      	lsrs	r1, r1, #1
 8002d0a:	440b      	add	r3, r1
 8002d0c:	0899      	lsrs	r1, r3, #2
 8002d0e:	460b      	mov	r3, r1
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	1a5b      	subs	r3, r3, r1
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	e029      	b.n	8002d6e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	4a15      	ldr	r2, [pc, #84]	@ (8002d7c <RTC_WeekDayNum+0xe4>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	085a      	lsrs	r2, r3, #1
 8002d2e:	78bb      	ldrb	r3, [r7, #2]
 8002d30:	441a      	add	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	441a      	add	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	089b      	lsrs	r3, r3, #2
 8002d3a:	441a      	add	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4910      	ldr	r1, [pc, #64]	@ (8002d80 <RTC_WeekDayNum+0xe8>)
 8002d40:	fba1 1303 	umull	r1, r3, r1, r3
 8002d44:	095b      	lsrs	r3, r3, #5
 8002d46:	1ad2      	subs	r2, r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	490d      	ldr	r1, [pc, #52]	@ (8002d80 <RTC_WeekDayNum+0xe8>)
 8002d4c:	fba1 1303 	umull	r1, r3, r1, r3
 8002d50:	09db      	lsrs	r3, r3, #7
 8002d52:	4413      	add	r3, r2
 8002d54:	1c9a      	adds	r2, r3, #2
 8002d56:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <RTC_WeekDayNum+0xec>)
 8002d58:	fba3 1302 	umull	r1, r3, r3, r2
 8002d5c:	1ad1      	subs	r1, r2, r3
 8002d5e:	0849      	lsrs	r1, r1, #1
 8002d60:	440b      	add	r3, r1
 8002d62:	0899      	lsrs	r1, r3, #2
 8002d64:	460b      	mov	r3, r1
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	1a5b      	subs	r3, r3, r1
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	b2db      	uxtb	r3, r3
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	38e38e39 	.word	0x38e38e39
 8002d80:	51eb851f 	.word	0x51eb851f
 8002d84:	24924925 	.word	0x24924925

08002d88 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8002d98:	4b07      	ldr	r3, [pc, #28]	@ (8002db8 <HAL_RTCEx_BKUPWrite+0x30>)
 8002d9a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	4413      	add	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	b292      	uxth	r2, r2
 8002dac:	601a      	str	r2, [r3, #0]
}
 8002dae:	bf00      	nop
 8002db0:	371c      	adds	r7, #28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr
 8002db8:	40006c00 	.word	0x40006c00

08002dbc <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8002dce:	4b08      	ldr	r3, [pc, #32]	@ (8002df0 <HAL_RTCEx_BKUPRead+0x34>)
 8002dd0:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4413      	add	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8002de4:	68bb      	ldr	r3, [r7, #8]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr
 8002df0:	40006c00 	.word	0x40006c00

08002df4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e076      	b.n	8002ef4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d108      	bne.n	8002e20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e16:	d009      	beq.n	8002e2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	61da      	str	r2, [r3, #28]
 8002e1e:	e005      	b.n	8002e2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fe f83e 	bl	8000ec8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e74:	431a      	orrs	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb0:	ea42 0103 	orr.w	r1, r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	0c1a      	lsrs	r2, r3, #16
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f002 0204 	and.w	r2, r2, #4
 8002ed2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ee2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_SPI_Transmit+0x22>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e12d      	b.n	800317a <HAL_SPI_Transmit+0x27e>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f26:	f7fe f909 	bl	800113c <HAL_GetTick>
 8002f2a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d002      	beq.n	8002f42 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f40:	e116      	b.n	8003170 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <HAL_SPI_Transmit+0x52>
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f52:	e10d      	b.n	8003170 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2203      	movs	r2, #3
 8002f58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	88fa      	ldrh	r2, [r7, #6]
 8002f6c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	88fa      	ldrh	r2, [r7, #6]
 8002f72:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f9a:	d10f      	bne.n	8002fbc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002faa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc6:	2b40      	cmp	r3, #64	@ 0x40
 8002fc8:	d007      	beq.n	8002fda <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fe2:	d14f      	bne.n	8003084 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <HAL_SPI_Transmit+0xf6>
 8002fec:	8afb      	ldrh	r3, [r7, #22]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d142      	bne.n	8003078 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff6:	881a      	ldrh	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003002:	1c9a      	adds	r2, r3, #2
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003016:	e02f      	b.n	8003078 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b02      	cmp	r3, #2
 8003024:	d112      	bne.n	800304c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	881a      	ldrh	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003036:	1c9a      	adds	r2, r3, #2
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003040:	b29b      	uxth	r3, r3
 8003042:	3b01      	subs	r3, #1
 8003044:	b29a      	uxth	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	86da      	strh	r2, [r3, #54]	@ 0x36
 800304a:	e015      	b.n	8003078 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800304c:	f7fe f876 	bl	800113c <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d803      	bhi.n	8003064 <HAL_SPI_Transmit+0x168>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003062:	d102      	bne.n	800306a <HAL_SPI_Transmit+0x16e>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003076:	e07b      	b.n	8003170 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1ca      	bne.n	8003018 <HAL_SPI_Transmit+0x11c>
 8003082:	e050      	b.n	8003126 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <HAL_SPI_Transmit+0x196>
 800308c:	8afb      	ldrh	r3, [r7, #22]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d144      	bne.n	800311c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	330c      	adds	r3, #12
 800309c:	7812      	ldrb	r2, [r2, #0]
 800309e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80030b8:	e030      	b.n	800311c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d113      	bne.n	80030f0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	330c      	adds	r3, #12
 80030d2:	7812      	ldrb	r2, [r2, #0]
 80030d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	86da      	strh	r2, [r3, #54]	@ 0x36
 80030ee:	e015      	b.n	800311c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030f0:	f7fe f824 	bl	800113c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d803      	bhi.n	8003108 <HAL_SPI_Transmit+0x20c>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003106:	d102      	bne.n	800310e <HAL_SPI_Transmit+0x212>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800311a:	e029      	b.n	8003170 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1c9      	bne.n	80030ba <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	6839      	ldr	r1, [r7, #0]
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f8b2 	bl	8003294 <SPI_EndRxTxTransaction>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10a      	bne.n	800315a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	77fb      	strb	r3, [r7, #31]
 8003166:	e003      	b.n	8003170 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003178:	7ffb      	ldrb	r3, [r7, #31]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3720      	adds	r7, #32
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	4613      	mov	r3, r2
 8003192:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003194:	f7fd ffd2 	bl	800113c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	4413      	add	r3, r2
 80031a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031a4:	f7fd ffca 	bl	800113c <HAL_GetTick>
 80031a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031aa:	4b39      	ldr	r3, [pc, #228]	@ (8003290 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	015b      	lsls	r3, r3, #5
 80031b0:	0d1b      	lsrs	r3, r3, #20
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	fb02 f303 	mul.w	r3, r2, r3
 80031b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031ba:	e054      	b.n	8003266 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c2:	d050      	beq.n	8003266 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031c4:	f7fd ffba 	bl	800113c <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d902      	bls.n	80031da <SPI_WaitFlagStateUntilTimeout+0x56>
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d13d      	bne.n	8003256 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031f2:	d111      	bne.n	8003218 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031fc:	d004      	beq.n	8003208 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003206:	d107      	bne.n	8003218 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003216:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003220:	d10f      	bne.n	8003242 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003240:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e017      	b.n	8003286 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	3b01      	subs	r3, #1
 8003264:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	4013      	ands	r3, r2
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	429a      	cmp	r2, r3
 8003274:	bf0c      	ite	eq
 8003276:	2301      	moveq	r3, #1
 8003278:	2300      	movne	r3, #0
 800327a:	b2db      	uxtb	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	429a      	cmp	r2, r3
 8003282:	d19b      	bne.n	80031bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3720      	adds	r7, #32
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20000010 	.word	0x20000010

08003294 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2200      	movs	r2, #0
 80032a8:	2180      	movs	r1, #128	@ 0x80
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f7ff ff6a 	bl	8003184 <SPI_WaitFlagStateUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ba:	f043 0220 	orr.w	r2, r3, #32
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e000      	b.n	80032c8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <malloc>:
 80032d0:	4b02      	ldr	r3, [pc, #8]	@ (80032dc <malloc+0xc>)
 80032d2:	4601      	mov	r1, r0
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	f000 b82d 	b.w	8003334 <_malloc_r>
 80032da:	bf00      	nop
 80032dc:	2000001c 	.word	0x2000001c

080032e0 <free>:
 80032e0:	4b02      	ldr	r3, [pc, #8]	@ (80032ec <free+0xc>)
 80032e2:	4601      	mov	r1, r0
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	f000 b915 	b.w	8003514 <_free_r>
 80032ea:	bf00      	nop
 80032ec:	2000001c 	.word	0x2000001c

080032f0 <sbrk_aligned>:
 80032f0:	b570      	push	{r4, r5, r6, lr}
 80032f2:	4e0f      	ldr	r6, [pc, #60]	@ (8003330 <sbrk_aligned+0x40>)
 80032f4:	460c      	mov	r4, r1
 80032f6:	6831      	ldr	r1, [r6, #0]
 80032f8:	4605      	mov	r5, r0
 80032fa:	b911      	cbnz	r1, 8003302 <sbrk_aligned+0x12>
 80032fc:	f000 f8ce 	bl	800349c <_sbrk_r>
 8003300:	6030      	str	r0, [r6, #0]
 8003302:	4621      	mov	r1, r4
 8003304:	4628      	mov	r0, r5
 8003306:	f000 f8c9 	bl	800349c <_sbrk_r>
 800330a:	1c43      	adds	r3, r0, #1
 800330c:	d103      	bne.n	8003316 <sbrk_aligned+0x26>
 800330e:	f04f 34ff 	mov.w	r4, #4294967295
 8003312:	4620      	mov	r0, r4
 8003314:	bd70      	pop	{r4, r5, r6, pc}
 8003316:	1cc4      	adds	r4, r0, #3
 8003318:	f024 0403 	bic.w	r4, r4, #3
 800331c:	42a0      	cmp	r0, r4
 800331e:	d0f8      	beq.n	8003312 <sbrk_aligned+0x22>
 8003320:	1a21      	subs	r1, r4, r0
 8003322:	4628      	mov	r0, r5
 8003324:	f000 f8ba 	bl	800349c <_sbrk_r>
 8003328:	3001      	adds	r0, #1
 800332a:	d1f2      	bne.n	8003312 <sbrk_aligned+0x22>
 800332c:	e7ef      	b.n	800330e <sbrk_aligned+0x1e>
 800332e:	bf00      	nop
 8003330:	20000124 	.word	0x20000124

08003334 <_malloc_r>:
 8003334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003338:	1ccd      	adds	r5, r1, #3
 800333a:	f025 0503 	bic.w	r5, r5, #3
 800333e:	3508      	adds	r5, #8
 8003340:	2d0c      	cmp	r5, #12
 8003342:	bf38      	it	cc
 8003344:	250c      	movcc	r5, #12
 8003346:	2d00      	cmp	r5, #0
 8003348:	4606      	mov	r6, r0
 800334a:	db01      	blt.n	8003350 <_malloc_r+0x1c>
 800334c:	42a9      	cmp	r1, r5
 800334e:	d904      	bls.n	800335a <_malloc_r+0x26>
 8003350:	230c      	movs	r3, #12
 8003352:	6033      	str	r3, [r6, #0]
 8003354:	2000      	movs	r0, #0
 8003356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800335a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003430 <_malloc_r+0xfc>
 800335e:	f000 f869 	bl	8003434 <__malloc_lock>
 8003362:	f8d8 3000 	ldr.w	r3, [r8]
 8003366:	461c      	mov	r4, r3
 8003368:	bb44      	cbnz	r4, 80033bc <_malloc_r+0x88>
 800336a:	4629      	mov	r1, r5
 800336c:	4630      	mov	r0, r6
 800336e:	f7ff ffbf 	bl	80032f0 <sbrk_aligned>
 8003372:	1c43      	adds	r3, r0, #1
 8003374:	4604      	mov	r4, r0
 8003376:	d158      	bne.n	800342a <_malloc_r+0xf6>
 8003378:	f8d8 4000 	ldr.w	r4, [r8]
 800337c:	4627      	mov	r7, r4
 800337e:	2f00      	cmp	r7, #0
 8003380:	d143      	bne.n	800340a <_malloc_r+0xd6>
 8003382:	2c00      	cmp	r4, #0
 8003384:	d04b      	beq.n	800341e <_malloc_r+0xea>
 8003386:	6823      	ldr	r3, [r4, #0]
 8003388:	4639      	mov	r1, r7
 800338a:	4630      	mov	r0, r6
 800338c:	eb04 0903 	add.w	r9, r4, r3
 8003390:	f000 f884 	bl	800349c <_sbrk_r>
 8003394:	4581      	cmp	r9, r0
 8003396:	d142      	bne.n	800341e <_malloc_r+0xea>
 8003398:	6821      	ldr	r1, [r4, #0]
 800339a:	4630      	mov	r0, r6
 800339c:	1a6d      	subs	r5, r5, r1
 800339e:	4629      	mov	r1, r5
 80033a0:	f7ff ffa6 	bl	80032f0 <sbrk_aligned>
 80033a4:	3001      	adds	r0, #1
 80033a6:	d03a      	beq.n	800341e <_malloc_r+0xea>
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	442b      	add	r3, r5
 80033ac:	6023      	str	r3, [r4, #0]
 80033ae:	f8d8 3000 	ldr.w	r3, [r8]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	bb62      	cbnz	r2, 8003410 <_malloc_r+0xdc>
 80033b6:	f8c8 7000 	str.w	r7, [r8]
 80033ba:	e00f      	b.n	80033dc <_malloc_r+0xa8>
 80033bc:	6822      	ldr	r2, [r4, #0]
 80033be:	1b52      	subs	r2, r2, r5
 80033c0:	d420      	bmi.n	8003404 <_malloc_r+0xd0>
 80033c2:	2a0b      	cmp	r2, #11
 80033c4:	d917      	bls.n	80033f6 <_malloc_r+0xc2>
 80033c6:	1961      	adds	r1, r4, r5
 80033c8:	42a3      	cmp	r3, r4
 80033ca:	6025      	str	r5, [r4, #0]
 80033cc:	bf18      	it	ne
 80033ce:	6059      	strne	r1, [r3, #4]
 80033d0:	6863      	ldr	r3, [r4, #4]
 80033d2:	bf08      	it	eq
 80033d4:	f8c8 1000 	streq.w	r1, [r8]
 80033d8:	5162      	str	r2, [r4, r5]
 80033da:	604b      	str	r3, [r1, #4]
 80033dc:	4630      	mov	r0, r6
 80033de:	f000 f82f 	bl	8003440 <__malloc_unlock>
 80033e2:	f104 000b 	add.w	r0, r4, #11
 80033e6:	1d23      	adds	r3, r4, #4
 80033e8:	f020 0007 	bic.w	r0, r0, #7
 80033ec:	1ac2      	subs	r2, r0, r3
 80033ee:	bf1c      	itt	ne
 80033f0:	1a1b      	subne	r3, r3, r0
 80033f2:	50a3      	strne	r3, [r4, r2]
 80033f4:	e7af      	b.n	8003356 <_malloc_r+0x22>
 80033f6:	6862      	ldr	r2, [r4, #4]
 80033f8:	42a3      	cmp	r3, r4
 80033fa:	bf0c      	ite	eq
 80033fc:	f8c8 2000 	streq.w	r2, [r8]
 8003400:	605a      	strne	r2, [r3, #4]
 8003402:	e7eb      	b.n	80033dc <_malloc_r+0xa8>
 8003404:	4623      	mov	r3, r4
 8003406:	6864      	ldr	r4, [r4, #4]
 8003408:	e7ae      	b.n	8003368 <_malloc_r+0x34>
 800340a:	463c      	mov	r4, r7
 800340c:	687f      	ldr	r7, [r7, #4]
 800340e:	e7b6      	b.n	800337e <_malloc_r+0x4a>
 8003410:	461a      	mov	r2, r3
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	42a3      	cmp	r3, r4
 8003416:	d1fb      	bne.n	8003410 <_malloc_r+0xdc>
 8003418:	2300      	movs	r3, #0
 800341a:	6053      	str	r3, [r2, #4]
 800341c:	e7de      	b.n	80033dc <_malloc_r+0xa8>
 800341e:	230c      	movs	r3, #12
 8003420:	4630      	mov	r0, r6
 8003422:	6033      	str	r3, [r6, #0]
 8003424:	f000 f80c 	bl	8003440 <__malloc_unlock>
 8003428:	e794      	b.n	8003354 <_malloc_r+0x20>
 800342a:	6005      	str	r5, [r0, #0]
 800342c:	e7d6      	b.n	80033dc <_malloc_r+0xa8>
 800342e:	bf00      	nop
 8003430:	20000128 	.word	0x20000128

08003434 <__malloc_lock>:
 8003434:	4801      	ldr	r0, [pc, #4]	@ (800343c <__malloc_lock+0x8>)
 8003436:	f000 b86b 	b.w	8003510 <__retarget_lock_acquire_recursive>
 800343a:	bf00      	nop
 800343c:	20000268 	.word	0x20000268

08003440 <__malloc_unlock>:
 8003440:	4801      	ldr	r0, [pc, #4]	@ (8003448 <__malloc_unlock+0x8>)
 8003442:	f000 b866 	b.w	8003512 <__retarget_lock_release_recursive>
 8003446:	bf00      	nop
 8003448:	20000268 	.word	0x20000268

0800344c <siprintf>:
 800344c:	b40e      	push	{r1, r2, r3}
 800344e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003452:	b500      	push	{lr}
 8003454:	b09c      	sub	sp, #112	@ 0x70
 8003456:	ab1d      	add	r3, sp, #116	@ 0x74
 8003458:	9002      	str	r0, [sp, #8]
 800345a:	9006      	str	r0, [sp, #24]
 800345c:	9107      	str	r1, [sp, #28]
 800345e:	9104      	str	r1, [sp, #16]
 8003460:	4808      	ldr	r0, [pc, #32]	@ (8003484 <siprintf+0x38>)
 8003462:	4909      	ldr	r1, [pc, #36]	@ (8003488 <siprintf+0x3c>)
 8003464:	f853 2b04 	ldr.w	r2, [r3], #4
 8003468:	9105      	str	r1, [sp, #20]
 800346a:	6800      	ldr	r0, [r0, #0]
 800346c:	a902      	add	r1, sp, #8
 800346e:	9301      	str	r3, [sp, #4]
 8003470:	f000 f8f4 	bl	800365c <_svfiprintf_r>
 8003474:	2200      	movs	r2, #0
 8003476:	9b02      	ldr	r3, [sp, #8]
 8003478:	701a      	strb	r2, [r3, #0]
 800347a:	b01c      	add	sp, #112	@ 0x70
 800347c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003480:	b003      	add	sp, #12
 8003482:	4770      	bx	lr
 8003484:	2000001c 	.word	0x2000001c
 8003488:	ffff0208 	.word	0xffff0208

0800348c <memset>:
 800348c:	4603      	mov	r3, r0
 800348e:	4402      	add	r2, r0
 8003490:	4293      	cmp	r3, r2
 8003492:	d100      	bne.n	8003496 <memset+0xa>
 8003494:	4770      	bx	lr
 8003496:	f803 1b01 	strb.w	r1, [r3], #1
 800349a:	e7f9      	b.n	8003490 <memset+0x4>

0800349c <_sbrk_r>:
 800349c:	b538      	push	{r3, r4, r5, lr}
 800349e:	2300      	movs	r3, #0
 80034a0:	4d05      	ldr	r5, [pc, #20]	@ (80034b8 <_sbrk_r+0x1c>)
 80034a2:	4604      	mov	r4, r0
 80034a4:	4608      	mov	r0, r1
 80034a6:	602b      	str	r3, [r5, #0]
 80034a8:	f7fd fd8e 	bl	8000fc8 <_sbrk>
 80034ac:	1c43      	adds	r3, r0, #1
 80034ae:	d102      	bne.n	80034b6 <_sbrk_r+0x1a>
 80034b0:	682b      	ldr	r3, [r5, #0]
 80034b2:	b103      	cbz	r3, 80034b6 <_sbrk_r+0x1a>
 80034b4:	6023      	str	r3, [r4, #0]
 80034b6:	bd38      	pop	{r3, r4, r5, pc}
 80034b8:	20000264 	.word	0x20000264

080034bc <__errno>:
 80034bc:	4b01      	ldr	r3, [pc, #4]	@ (80034c4 <__errno+0x8>)
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	2000001c 	.word	0x2000001c

080034c8 <__libc_init_array>:
 80034c8:	b570      	push	{r4, r5, r6, lr}
 80034ca:	2600      	movs	r6, #0
 80034cc:	4d0c      	ldr	r5, [pc, #48]	@ (8003500 <__libc_init_array+0x38>)
 80034ce:	4c0d      	ldr	r4, [pc, #52]	@ (8003504 <__libc_init_array+0x3c>)
 80034d0:	1b64      	subs	r4, r4, r5
 80034d2:	10a4      	asrs	r4, r4, #2
 80034d4:	42a6      	cmp	r6, r4
 80034d6:	d109      	bne.n	80034ec <__libc_init_array+0x24>
 80034d8:	f000 fbba 	bl	8003c50 <_init>
 80034dc:	2600      	movs	r6, #0
 80034de:	4d0a      	ldr	r5, [pc, #40]	@ (8003508 <__libc_init_array+0x40>)
 80034e0:	4c0a      	ldr	r4, [pc, #40]	@ (800350c <__libc_init_array+0x44>)
 80034e2:	1b64      	subs	r4, r4, r5
 80034e4:	10a4      	asrs	r4, r4, #2
 80034e6:	42a6      	cmp	r6, r4
 80034e8:	d105      	bne.n	80034f6 <__libc_init_array+0x2e>
 80034ea:	bd70      	pop	{r4, r5, r6, pc}
 80034ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f0:	4798      	blx	r3
 80034f2:	3601      	adds	r6, #1
 80034f4:	e7ee      	b.n	80034d4 <__libc_init_array+0xc>
 80034f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034fa:	4798      	blx	r3
 80034fc:	3601      	adds	r6, #1
 80034fe:	e7f2      	b.n	80034e6 <__libc_init_array+0x1e>
 8003500:	08005284 	.word	0x08005284
 8003504:	08005284 	.word	0x08005284
 8003508:	08005284 	.word	0x08005284
 800350c:	08005288 	.word	0x08005288

08003510 <__retarget_lock_acquire_recursive>:
 8003510:	4770      	bx	lr

08003512 <__retarget_lock_release_recursive>:
 8003512:	4770      	bx	lr

08003514 <_free_r>:
 8003514:	b538      	push	{r3, r4, r5, lr}
 8003516:	4605      	mov	r5, r0
 8003518:	2900      	cmp	r1, #0
 800351a:	d040      	beq.n	800359e <_free_r+0x8a>
 800351c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003520:	1f0c      	subs	r4, r1, #4
 8003522:	2b00      	cmp	r3, #0
 8003524:	bfb8      	it	lt
 8003526:	18e4      	addlt	r4, r4, r3
 8003528:	f7ff ff84 	bl	8003434 <__malloc_lock>
 800352c:	4a1c      	ldr	r2, [pc, #112]	@ (80035a0 <_free_r+0x8c>)
 800352e:	6813      	ldr	r3, [r2, #0]
 8003530:	b933      	cbnz	r3, 8003540 <_free_r+0x2c>
 8003532:	6063      	str	r3, [r4, #4]
 8003534:	6014      	str	r4, [r2, #0]
 8003536:	4628      	mov	r0, r5
 8003538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800353c:	f7ff bf80 	b.w	8003440 <__malloc_unlock>
 8003540:	42a3      	cmp	r3, r4
 8003542:	d908      	bls.n	8003556 <_free_r+0x42>
 8003544:	6820      	ldr	r0, [r4, #0]
 8003546:	1821      	adds	r1, r4, r0
 8003548:	428b      	cmp	r3, r1
 800354a:	bf01      	itttt	eq
 800354c:	6819      	ldreq	r1, [r3, #0]
 800354e:	685b      	ldreq	r3, [r3, #4]
 8003550:	1809      	addeq	r1, r1, r0
 8003552:	6021      	streq	r1, [r4, #0]
 8003554:	e7ed      	b.n	8003532 <_free_r+0x1e>
 8003556:	461a      	mov	r2, r3
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	b10b      	cbz	r3, 8003560 <_free_r+0x4c>
 800355c:	42a3      	cmp	r3, r4
 800355e:	d9fa      	bls.n	8003556 <_free_r+0x42>
 8003560:	6811      	ldr	r1, [r2, #0]
 8003562:	1850      	adds	r0, r2, r1
 8003564:	42a0      	cmp	r0, r4
 8003566:	d10b      	bne.n	8003580 <_free_r+0x6c>
 8003568:	6820      	ldr	r0, [r4, #0]
 800356a:	4401      	add	r1, r0
 800356c:	1850      	adds	r0, r2, r1
 800356e:	4283      	cmp	r3, r0
 8003570:	6011      	str	r1, [r2, #0]
 8003572:	d1e0      	bne.n	8003536 <_free_r+0x22>
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4408      	add	r0, r1
 800357a:	6010      	str	r0, [r2, #0]
 800357c:	6053      	str	r3, [r2, #4]
 800357e:	e7da      	b.n	8003536 <_free_r+0x22>
 8003580:	d902      	bls.n	8003588 <_free_r+0x74>
 8003582:	230c      	movs	r3, #12
 8003584:	602b      	str	r3, [r5, #0]
 8003586:	e7d6      	b.n	8003536 <_free_r+0x22>
 8003588:	6820      	ldr	r0, [r4, #0]
 800358a:	1821      	adds	r1, r4, r0
 800358c:	428b      	cmp	r3, r1
 800358e:	bf01      	itttt	eq
 8003590:	6819      	ldreq	r1, [r3, #0]
 8003592:	685b      	ldreq	r3, [r3, #4]
 8003594:	1809      	addeq	r1, r1, r0
 8003596:	6021      	streq	r1, [r4, #0]
 8003598:	6063      	str	r3, [r4, #4]
 800359a:	6054      	str	r4, [r2, #4]
 800359c:	e7cb      	b.n	8003536 <_free_r+0x22>
 800359e:	bd38      	pop	{r3, r4, r5, pc}
 80035a0:	20000128 	.word	0x20000128

080035a4 <__ssputs_r>:
 80035a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035a8:	461f      	mov	r7, r3
 80035aa:	688e      	ldr	r6, [r1, #8]
 80035ac:	4682      	mov	sl, r0
 80035ae:	42be      	cmp	r6, r7
 80035b0:	460c      	mov	r4, r1
 80035b2:	4690      	mov	r8, r2
 80035b4:	680b      	ldr	r3, [r1, #0]
 80035b6:	d82d      	bhi.n	8003614 <__ssputs_r+0x70>
 80035b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80035bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80035c0:	d026      	beq.n	8003610 <__ssputs_r+0x6c>
 80035c2:	6965      	ldr	r5, [r4, #20]
 80035c4:	6909      	ldr	r1, [r1, #16]
 80035c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035ca:	eba3 0901 	sub.w	r9, r3, r1
 80035ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035d2:	1c7b      	adds	r3, r7, #1
 80035d4:	444b      	add	r3, r9
 80035d6:	106d      	asrs	r5, r5, #1
 80035d8:	429d      	cmp	r5, r3
 80035da:	bf38      	it	cc
 80035dc:	461d      	movcc	r5, r3
 80035de:	0553      	lsls	r3, r2, #21
 80035e0:	d527      	bpl.n	8003632 <__ssputs_r+0x8e>
 80035e2:	4629      	mov	r1, r5
 80035e4:	f7ff fea6 	bl	8003334 <_malloc_r>
 80035e8:	4606      	mov	r6, r0
 80035ea:	b360      	cbz	r0, 8003646 <__ssputs_r+0xa2>
 80035ec:	464a      	mov	r2, r9
 80035ee:	6921      	ldr	r1, [r4, #16]
 80035f0:	f000 faea 	bl	8003bc8 <memcpy>
 80035f4:	89a3      	ldrh	r3, [r4, #12]
 80035f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80035fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035fe:	81a3      	strh	r3, [r4, #12]
 8003600:	6126      	str	r6, [r4, #16]
 8003602:	444e      	add	r6, r9
 8003604:	6026      	str	r6, [r4, #0]
 8003606:	463e      	mov	r6, r7
 8003608:	6165      	str	r5, [r4, #20]
 800360a:	eba5 0509 	sub.w	r5, r5, r9
 800360e:	60a5      	str	r5, [r4, #8]
 8003610:	42be      	cmp	r6, r7
 8003612:	d900      	bls.n	8003616 <__ssputs_r+0x72>
 8003614:	463e      	mov	r6, r7
 8003616:	4632      	mov	r2, r6
 8003618:	4641      	mov	r1, r8
 800361a:	6820      	ldr	r0, [r4, #0]
 800361c:	f000 faac 	bl	8003b78 <memmove>
 8003620:	2000      	movs	r0, #0
 8003622:	68a3      	ldr	r3, [r4, #8]
 8003624:	1b9b      	subs	r3, r3, r6
 8003626:	60a3      	str	r3, [r4, #8]
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	4433      	add	r3, r6
 800362c:	6023      	str	r3, [r4, #0]
 800362e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003632:	462a      	mov	r2, r5
 8003634:	f000 fad6 	bl	8003be4 <_realloc_r>
 8003638:	4606      	mov	r6, r0
 800363a:	2800      	cmp	r0, #0
 800363c:	d1e0      	bne.n	8003600 <__ssputs_r+0x5c>
 800363e:	4650      	mov	r0, sl
 8003640:	6921      	ldr	r1, [r4, #16]
 8003642:	f7ff ff67 	bl	8003514 <_free_r>
 8003646:	230c      	movs	r3, #12
 8003648:	f8ca 3000 	str.w	r3, [sl]
 800364c:	89a3      	ldrh	r3, [r4, #12]
 800364e:	f04f 30ff 	mov.w	r0, #4294967295
 8003652:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003656:	81a3      	strh	r3, [r4, #12]
 8003658:	e7e9      	b.n	800362e <__ssputs_r+0x8a>
	...

0800365c <_svfiprintf_r>:
 800365c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003660:	4698      	mov	r8, r3
 8003662:	898b      	ldrh	r3, [r1, #12]
 8003664:	4607      	mov	r7, r0
 8003666:	061b      	lsls	r3, r3, #24
 8003668:	460d      	mov	r5, r1
 800366a:	4614      	mov	r4, r2
 800366c:	b09d      	sub	sp, #116	@ 0x74
 800366e:	d510      	bpl.n	8003692 <_svfiprintf_r+0x36>
 8003670:	690b      	ldr	r3, [r1, #16]
 8003672:	b973      	cbnz	r3, 8003692 <_svfiprintf_r+0x36>
 8003674:	2140      	movs	r1, #64	@ 0x40
 8003676:	f7ff fe5d 	bl	8003334 <_malloc_r>
 800367a:	6028      	str	r0, [r5, #0]
 800367c:	6128      	str	r0, [r5, #16]
 800367e:	b930      	cbnz	r0, 800368e <_svfiprintf_r+0x32>
 8003680:	230c      	movs	r3, #12
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	f04f 30ff 	mov.w	r0, #4294967295
 8003688:	b01d      	add	sp, #116	@ 0x74
 800368a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800368e:	2340      	movs	r3, #64	@ 0x40
 8003690:	616b      	str	r3, [r5, #20]
 8003692:	2300      	movs	r3, #0
 8003694:	9309      	str	r3, [sp, #36]	@ 0x24
 8003696:	2320      	movs	r3, #32
 8003698:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800369c:	2330      	movs	r3, #48	@ 0x30
 800369e:	f04f 0901 	mov.w	r9, #1
 80036a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80036a6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003840 <_svfiprintf_r+0x1e4>
 80036aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80036ae:	4623      	mov	r3, r4
 80036b0:	469a      	mov	sl, r3
 80036b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036b6:	b10a      	cbz	r2, 80036bc <_svfiprintf_r+0x60>
 80036b8:	2a25      	cmp	r2, #37	@ 0x25
 80036ba:	d1f9      	bne.n	80036b0 <_svfiprintf_r+0x54>
 80036bc:	ebba 0b04 	subs.w	fp, sl, r4
 80036c0:	d00b      	beq.n	80036da <_svfiprintf_r+0x7e>
 80036c2:	465b      	mov	r3, fp
 80036c4:	4622      	mov	r2, r4
 80036c6:	4629      	mov	r1, r5
 80036c8:	4638      	mov	r0, r7
 80036ca:	f7ff ff6b 	bl	80035a4 <__ssputs_r>
 80036ce:	3001      	adds	r0, #1
 80036d0:	f000 80a7 	beq.w	8003822 <_svfiprintf_r+0x1c6>
 80036d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80036d6:	445a      	add	r2, fp
 80036d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80036da:	f89a 3000 	ldrb.w	r3, [sl]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 809f 	beq.w	8003822 <_svfiprintf_r+0x1c6>
 80036e4:	2300      	movs	r3, #0
 80036e6:	f04f 32ff 	mov.w	r2, #4294967295
 80036ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036ee:	f10a 0a01 	add.w	sl, sl, #1
 80036f2:	9304      	str	r3, [sp, #16]
 80036f4:	9307      	str	r3, [sp, #28]
 80036f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80036fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80036fc:	4654      	mov	r4, sl
 80036fe:	2205      	movs	r2, #5
 8003700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003704:	484e      	ldr	r0, [pc, #312]	@ (8003840 <_svfiprintf_r+0x1e4>)
 8003706:	f000 fa51 	bl	8003bac <memchr>
 800370a:	9a04      	ldr	r2, [sp, #16]
 800370c:	b9d8      	cbnz	r0, 8003746 <_svfiprintf_r+0xea>
 800370e:	06d0      	lsls	r0, r2, #27
 8003710:	bf44      	itt	mi
 8003712:	2320      	movmi	r3, #32
 8003714:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003718:	0711      	lsls	r1, r2, #28
 800371a:	bf44      	itt	mi
 800371c:	232b      	movmi	r3, #43	@ 0x2b
 800371e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003722:	f89a 3000 	ldrb.w	r3, [sl]
 8003726:	2b2a      	cmp	r3, #42	@ 0x2a
 8003728:	d015      	beq.n	8003756 <_svfiprintf_r+0xfa>
 800372a:	4654      	mov	r4, sl
 800372c:	2000      	movs	r0, #0
 800372e:	f04f 0c0a 	mov.w	ip, #10
 8003732:	9a07      	ldr	r2, [sp, #28]
 8003734:	4621      	mov	r1, r4
 8003736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800373a:	3b30      	subs	r3, #48	@ 0x30
 800373c:	2b09      	cmp	r3, #9
 800373e:	d94b      	bls.n	80037d8 <_svfiprintf_r+0x17c>
 8003740:	b1b0      	cbz	r0, 8003770 <_svfiprintf_r+0x114>
 8003742:	9207      	str	r2, [sp, #28]
 8003744:	e014      	b.n	8003770 <_svfiprintf_r+0x114>
 8003746:	eba0 0308 	sub.w	r3, r0, r8
 800374a:	fa09 f303 	lsl.w	r3, r9, r3
 800374e:	4313      	orrs	r3, r2
 8003750:	46a2      	mov	sl, r4
 8003752:	9304      	str	r3, [sp, #16]
 8003754:	e7d2      	b.n	80036fc <_svfiprintf_r+0xa0>
 8003756:	9b03      	ldr	r3, [sp, #12]
 8003758:	1d19      	adds	r1, r3, #4
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	9103      	str	r1, [sp, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	bfbb      	ittet	lt
 8003762:	425b      	neglt	r3, r3
 8003764:	f042 0202 	orrlt.w	r2, r2, #2
 8003768:	9307      	strge	r3, [sp, #28]
 800376a:	9307      	strlt	r3, [sp, #28]
 800376c:	bfb8      	it	lt
 800376e:	9204      	strlt	r2, [sp, #16]
 8003770:	7823      	ldrb	r3, [r4, #0]
 8003772:	2b2e      	cmp	r3, #46	@ 0x2e
 8003774:	d10a      	bne.n	800378c <_svfiprintf_r+0x130>
 8003776:	7863      	ldrb	r3, [r4, #1]
 8003778:	2b2a      	cmp	r3, #42	@ 0x2a
 800377a:	d132      	bne.n	80037e2 <_svfiprintf_r+0x186>
 800377c:	9b03      	ldr	r3, [sp, #12]
 800377e:	3402      	adds	r4, #2
 8003780:	1d1a      	adds	r2, r3, #4
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	9203      	str	r2, [sp, #12]
 8003786:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800378a:	9305      	str	r3, [sp, #20]
 800378c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003844 <_svfiprintf_r+0x1e8>
 8003790:	2203      	movs	r2, #3
 8003792:	4650      	mov	r0, sl
 8003794:	7821      	ldrb	r1, [r4, #0]
 8003796:	f000 fa09 	bl	8003bac <memchr>
 800379a:	b138      	cbz	r0, 80037ac <_svfiprintf_r+0x150>
 800379c:	2240      	movs	r2, #64	@ 0x40
 800379e:	9b04      	ldr	r3, [sp, #16]
 80037a0:	eba0 000a 	sub.w	r0, r0, sl
 80037a4:	4082      	lsls	r2, r0
 80037a6:	4313      	orrs	r3, r2
 80037a8:	3401      	adds	r4, #1
 80037aa:	9304      	str	r3, [sp, #16]
 80037ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037b0:	2206      	movs	r2, #6
 80037b2:	4825      	ldr	r0, [pc, #148]	@ (8003848 <_svfiprintf_r+0x1ec>)
 80037b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80037b8:	f000 f9f8 	bl	8003bac <memchr>
 80037bc:	2800      	cmp	r0, #0
 80037be:	d036      	beq.n	800382e <_svfiprintf_r+0x1d2>
 80037c0:	4b22      	ldr	r3, [pc, #136]	@ (800384c <_svfiprintf_r+0x1f0>)
 80037c2:	bb1b      	cbnz	r3, 800380c <_svfiprintf_r+0x1b0>
 80037c4:	9b03      	ldr	r3, [sp, #12]
 80037c6:	3307      	adds	r3, #7
 80037c8:	f023 0307 	bic.w	r3, r3, #7
 80037cc:	3308      	adds	r3, #8
 80037ce:	9303      	str	r3, [sp, #12]
 80037d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037d2:	4433      	add	r3, r6
 80037d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80037d6:	e76a      	b.n	80036ae <_svfiprintf_r+0x52>
 80037d8:	460c      	mov	r4, r1
 80037da:	2001      	movs	r0, #1
 80037dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80037e0:	e7a8      	b.n	8003734 <_svfiprintf_r+0xd8>
 80037e2:	2300      	movs	r3, #0
 80037e4:	f04f 0c0a 	mov.w	ip, #10
 80037e8:	4619      	mov	r1, r3
 80037ea:	3401      	adds	r4, #1
 80037ec:	9305      	str	r3, [sp, #20]
 80037ee:	4620      	mov	r0, r4
 80037f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037f4:	3a30      	subs	r2, #48	@ 0x30
 80037f6:	2a09      	cmp	r2, #9
 80037f8:	d903      	bls.n	8003802 <_svfiprintf_r+0x1a6>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0c6      	beq.n	800378c <_svfiprintf_r+0x130>
 80037fe:	9105      	str	r1, [sp, #20]
 8003800:	e7c4      	b.n	800378c <_svfiprintf_r+0x130>
 8003802:	4604      	mov	r4, r0
 8003804:	2301      	movs	r3, #1
 8003806:	fb0c 2101 	mla	r1, ip, r1, r2
 800380a:	e7f0      	b.n	80037ee <_svfiprintf_r+0x192>
 800380c:	ab03      	add	r3, sp, #12
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	462a      	mov	r2, r5
 8003812:	4638      	mov	r0, r7
 8003814:	4b0e      	ldr	r3, [pc, #56]	@ (8003850 <_svfiprintf_r+0x1f4>)
 8003816:	a904      	add	r1, sp, #16
 8003818:	f3af 8000 	nop.w
 800381c:	1c42      	adds	r2, r0, #1
 800381e:	4606      	mov	r6, r0
 8003820:	d1d6      	bne.n	80037d0 <_svfiprintf_r+0x174>
 8003822:	89ab      	ldrh	r3, [r5, #12]
 8003824:	065b      	lsls	r3, r3, #25
 8003826:	f53f af2d 	bmi.w	8003684 <_svfiprintf_r+0x28>
 800382a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800382c:	e72c      	b.n	8003688 <_svfiprintf_r+0x2c>
 800382e:	ab03      	add	r3, sp, #12
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	462a      	mov	r2, r5
 8003834:	4638      	mov	r0, r7
 8003836:	4b06      	ldr	r3, [pc, #24]	@ (8003850 <_svfiprintf_r+0x1f4>)
 8003838:	a904      	add	r1, sp, #16
 800383a:	f000 f87d 	bl	8003938 <_printf_i>
 800383e:	e7ed      	b.n	800381c <_svfiprintf_r+0x1c0>
 8003840:	0800524e 	.word	0x0800524e
 8003844:	08005254 	.word	0x08005254
 8003848:	08005258 	.word	0x08005258
 800384c:	00000000 	.word	0x00000000
 8003850:	080035a5 	.word	0x080035a5

08003854 <_printf_common>:
 8003854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003858:	4616      	mov	r6, r2
 800385a:	4698      	mov	r8, r3
 800385c:	688a      	ldr	r2, [r1, #8]
 800385e:	690b      	ldr	r3, [r1, #16]
 8003860:	4607      	mov	r7, r0
 8003862:	4293      	cmp	r3, r2
 8003864:	bfb8      	it	lt
 8003866:	4613      	movlt	r3, r2
 8003868:	6033      	str	r3, [r6, #0]
 800386a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800386e:	460c      	mov	r4, r1
 8003870:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003874:	b10a      	cbz	r2, 800387a <_printf_common+0x26>
 8003876:	3301      	adds	r3, #1
 8003878:	6033      	str	r3, [r6, #0]
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	0699      	lsls	r1, r3, #26
 800387e:	bf42      	ittt	mi
 8003880:	6833      	ldrmi	r3, [r6, #0]
 8003882:	3302      	addmi	r3, #2
 8003884:	6033      	strmi	r3, [r6, #0]
 8003886:	6825      	ldr	r5, [r4, #0]
 8003888:	f015 0506 	ands.w	r5, r5, #6
 800388c:	d106      	bne.n	800389c <_printf_common+0x48>
 800388e:	f104 0a19 	add.w	sl, r4, #25
 8003892:	68e3      	ldr	r3, [r4, #12]
 8003894:	6832      	ldr	r2, [r6, #0]
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	42ab      	cmp	r3, r5
 800389a:	dc2b      	bgt.n	80038f4 <_printf_common+0xa0>
 800389c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038a0:	6822      	ldr	r2, [r4, #0]
 80038a2:	3b00      	subs	r3, #0
 80038a4:	bf18      	it	ne
 80038a6:	2301      	movne	r3, #1
 80038a8:	0692      	lsls	r2, r2, #26
 80038aa:	d430      	bmi.n	800390e <_printf_common+0xba>
 80038ac:	4641      	mov	r1, r8
 80038ae:	4638      	mov	r0, r7
 80038b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038b4:	47c8      	blx	r9
 80038b6:	3001      	adds	r0, #1
 80038b8:	d023      	beq.n	8003902 <_printf_common+0xae>
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	6922      	ldr	r2, [r4, #16]
 80038be:	f003 0306 	and.w	r3, r3, #6
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	bf14      	ite	ne
 80038c6:	2500      	movne	r5, #0
 80038c8:	6833      	ldreq	r3, [r6, #0]
 80038ca:	f04f 0600 	mov.w	r6, #0
 80038ce:	bf08      	it	eq
 80038d0:	68e5      	ldreq	r5, [r4, #12]
 80038d2:	f104 041a 	add.w	r4, r4, #26
 80038d6:	bf08      	it	eq
 80038d8:	1aed      	subeq	r5, r5, r3
 80038da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80038de:	bf08      	it	eq
 80038e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038e4:	4293      	cmp	r3, r2
 80038e6:	bfc4      	itt	gt
 80038e8:	1a9b      	subgt	r3, r3, r2
 80038ea:	18ed      	addgt	r5, r5, r3
 80038ec:	42b5      	cmp	r5, r6
 80038ee:	d11a      	bne.n	8003926 <_printf_common+0xd2>
 80038f0:	2000      	movs	r0, #0
 80038f2:	e008      	b.n	8003906 <_printf_common+0xb2>
 80038f4:	2301      	movs	r3, #1
 80038f6:	4652      	mov	r2, sl
 80038f8:	4641      	mov	r1, r8
 80038fa:	4638      	mov	r0, r7
 80038fc:	47c8      	blx	r9
 80038fe:	3001      	adds	r0, #1
 8003900:	d103      	bne.n	800390a <_printf_common+0xb6>
 8003902:	f04f 30ff 	mov.w	r0, #4294967295
 8003906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800390a:	3501      	adds	r5, #1
 800390c:	e7c1      	b.n	8003892 <_printf_common+0x3e>
 800390e:	2030      	movs	r0, #48	@ 0x30
 8003910:	18e1      	adds	r1, r4, r3
 8003912:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800391c:	4422      	add	r2, r4
 800391e:	3302      	adds	r3, #2
 8003920:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003924:	e7c2      	b.n	80038ac <_printf_common+0x58>
 8003926:	2301      	movs	r3, #1
 8003928:	4622      	mov	r2, r4
 800392a:	4641      	mov	r1, r8
 800392c:	4638      	mov	r0, r7
 800392e:	47c8      	blx	r9
 8003930:	3001      	adds	r0, #1
 8003932:	d0e6      	beq.n	8003902 <_printf_common+0xae>
 8003934:	3601      	adds	r6, #1
 8003936:	e7d9      	b.n	80038ec <_printf_common+0x98>

08003938 <_printf_i>:
 8003938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800393c:	7e0f      	ldrb	r7, [r1, #24]
 800393e:	4691      	mov	r9, r2
 8003940:	2f78      	cmp	r7, #120	@ 0x78
 8003942:	4680      	mov	r8, r0
 8003944:	460c      	mov	r4, r1
 8003946:	469a      	mov	sl, r3
 8003948:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800394a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800394e:	d807      	bhi.n	8003960 <_printf_i+0x28>
 8003950:	2f62      	cmp	r7, #98	@ 0x62
 8003952:	d80a      	bhi.n	800396a <_printf_i+0x32>
 8003954:	2f00      	cmp	r7, #0
 8003956:	f000 80d3 	beq.w	8003b00 <_printf_i+0x1c8>
 800395a:	2f58      	cmp	r7, #88	@ 0x58
 800395c:	f000 80ba 	beq.w	8003ad4 <_printf_i+0x19c>
 8003960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003964:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003968:	e03a      	b.n	80039e0 <_printf_i+0xa8>
 800396a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800396e:	2b15      	cmp	r3, #21
 8003970:	d8f6      	bhi.n	8003960 <_printf_i+0x28>
 8003972:	a101      	add	r1, pc, #4	@ (adr r1, 8003978 <_printf_i+0x40>)
 8003974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003978:	080039d1 	.word	0x080039d1
 800397c:	080039e5 	.word	0x080039e5
 8003980:	08003961 	.word	0x08003961
 8003984:	08003961 	.word	0x08003961
 8003988:	08003961 	.word	0x08003961
 800398c:	08003961 	.word	0x08003961
 8003990:	080039e5 	.word	0x080039e5
 8003994:	08003961 	.word	0x08003961
 8003998:	08003961 	.word	0x08003961
 800399c:	08003961 	.word	0x08003961
 80039a0:	08003961 	.word	0x08003961
 80039a4:	08003ae7 	.word	0x08003ae7
 80039a8:	08003a0f 	.word	0x08003a0f
 80039ac:	08003aa1 	.word	0x08003aa1
 80039b0:	08003961 	.word	0x08003961
 80039b4:	08003961 	.word	0x08003961
 80039b8:	08003b09 	.word	0x08003b09
 80039bc:	08003961 	.word	0x08003961
 80039c0:	08003a0f 	.word	0x08003a0f
 80039c4:	08003961 	.word	0x08003961
 80039c8:	08003961 	.word	0x08003961
 80039cc:	08003aa9 	.word	0x08003aa9
 80039d0:	6833      	ldr	r3, [r6, #0]
 80039d2:	1d1a      	adds	r2, r3, #4
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6032      	str	r2, [r6, #0]
 80039d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039e0:	2301      	movs	r3, #1
 80039e2:	e09e      	b.n	8003b22 <_printf_i+0x1ea>
 80039e4:	6833      	ldr	r3, [r6, #0]
 80039e6:	6820      	ldr	r0, [r4, #0]
 80039e8:	1d19      	adds	r1, r3, #4
 80039ea:	6031      	str	r1, [r6, #0]
 80039ec:	0606      	lsls	r6, r0, #24
 80039ee:	d501      	bpl.n	80039f4 <_printf_i+0xbc>
 80039f0:	681d      	ldr	r5, [r3, #0]
 80039f2:	e003      	b.n	80039fc <_printf_i+0xc4>
 80039f4:	0645      	lsls	r5, r0, #25
 80039f6:	d5fb      	bpl.n	80039f0 <_printf_i+0xb8>
 80039f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039fc:	2d00      	cmp	r5, #0
 80039fe:	da03      	bge.n	8003a08 <_printf_i+0xd0>
 8003a00:	232d      	movs	r3, #45	@ 0x2d
 8003a02:	426d      	negs	r5, r5
 8003a04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a08:	230a      	movs	r3, #10
 8003a0a:	4859      	ldr	r0, [pc, #356]	@ (8003b70 <_printf_i+0x238>)
 8003a0c:	e011      	b.n	8003a32 <_printf_i+0xfa>
 8003a0e:	6821      	ldr	r1, [r4, #0]
 8003a10:	6833      	ldr	r3, [r6, #0]
 8003a12:	0608      	lsls	r0, r1, #24
 8003a14:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a18:	d402      	bmi.n	8003a20 <_printf_i+0xe8>
 8003a1a:	0649      	lsls	r1, r1, #25
 8003a1c:	bf48      	it	mi
 8003a1e:	b2ad      	uxthmi	r5, r5
 8003a20:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a22:	6033      	str	r3, [r6, #0]
 8003a24:	bf14      	ite	ne
 8003a26:	230a      	movne	r3, #10
 8003a28:	2308      	moveq	r3, #8
 8003a2a:	4851      	ldr	r0, [pc, #324]	@ (8003b70 <_printf_i+0x238>)
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a32:	6866      	ldr	r6, [r4, #4]
 8003a34:	2e00      	cmp	r6, #0
 8003a36:	bfa8      	it	ge
 8003a38:	6821      	ldrge	r1, [r4, #0]
 8003a3a:	60a6      	str	r6, [r4, #8]
 8003a3c:	bfa4      	itt	ge
 8003a3e:	f021 0104 	bicge.w	r1, r1, #4
 8003a42:	6021      	strge	r1, [r4, #0]
 8003a44:	b90d      	cbnz	r5, 8003a4a <_printf_i+0x112>
 8003a46:	2e00      	cmp	r6, #0
 8003a48:	d04b      	beq.n	8003ae2 <_printf_i+0x1aa>
 8003a4a:	4616      	mov	r6, r2
 8003a4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a50:	fb03 5711 	mls	r7, r3, r1, r5
 8003a54:	5dc7      	ldrb	r7, [r0, r7]
 8003a56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a5a:	462f      	mov	r7, r5
 8003a5c:	42bb      	cmp	r3, r7
 8003a5e:	460d      	mov	r5, r1
 8003a60:	d9f4      	bls.n	8003a4c <_printf_i+0x114>
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d10b      	bne.n	8003a7e <_printf_i+0x146>
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	07df      	lsls	r7, r3, #31
 8003a6a:	d508      	bpl.n	8003a7e <_printf_i+0x146>
 8003a6c:	6923      	ldr	r3, [r4, #16]
 8003a6e:	6861      	ldr	r1, [r4, #4]
 8003a70:	4299      	cmp	r1, r3
 8003a72:	bfde      	ittt	le
 8003a74:	2330      	movle	r3, #48	@ 0x30
 8003a76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a7e:	1b92      	subs	r2, r2, r6
 8003a80:	6122      	str	r2, [r4, #16]
 8003a82:	464b      	mov	r3, r9
 8003a84:	4621      	mov	r1, r4
 8003a86:	4640      	mov	r0, r8
 8003a88:	f8cd a000 	str.w	sl, [sp]
 8003a8c:	aa03      	add	r2, sp, #12
 8003a8e:	f7ff fee1 	bl	8003854 <_printf_common>
 8003a92:	3001      	adds	r0, #1
 8003a94:	d14a      	bne.n	8003b2c <_printf_i+0x1f4>
 8003a96:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9a:	b004      	add	sp, #16
 8003a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	f043 0320 	orr.w	r3, r3, #32
 8003aa6:	6023      	str	r3, [r4, #0]
 8003aa8:	2778      	movs	r7, #120	@ 0x78
 8003aaa:	4832      	ldr	r0, [pc, #200]	@ (8003b74 <_printf_i+0x23c>)
 8003aac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	6831      	ldr	r1, [r6, #0]
 8003ab4:	061f      	lsls	r7, r3, #24
 8003ab6:	f851 5b04 	ldr.w	r5, [r1], #4
 8003aba:	d402      	bmi.n	8003ac2 <_printf_i+0x18a>
 8003abc:	065f      	lsls	r7, r3, #25
 8003abe:	bf48      	it	mi
 8003ac0:	b2ad      	uxthmi	r5, r5
 8003ac2:	6031      	str	r1, [r6, #0]
 8003ac4:	07d9      	lsls	r1, r3, #31
 8003ac6:	bf44      	itt	mi
 8003ac8:	f043 0320 	orrmi.w	r3, r3, #32
 8003acc:	6023      	strmi	r3, [r4, #0]
 8003ace:	b11d      	cbz	r5, 8003ad8 <_printf_i+0x1a0>
 8003ad0:	2310      	movs	r3, #16
 8003ad2:	e7ab      	b.n	8003a2c <_printf_i+0xf4>
 8003ad4:	4826      	ldr	r0, [pc, #152]	@ (8003b70 <_printf_i+0x238>)
 8003ad6:	e7e9      	b.n	8003aac <_printf_i+0x174>
 8003ad8:	6823      	ldr	r3, [r4, #0]
 8003ada:	f023 0320 	bic.w	r3, r3, #32
 8003ade:	6023      	str	r3, [r4, #0]
 8003ae0:	e7f6      	b.n	8003ad0 <_printf_i+0x198>
 8003ae2:	4616      	mov	r6, r2
 8003ae4:	e7bd      	b.n	8003a62 <_printf_i+0x12a>
 8003ae6:	6833      	ldr	r3, [r6, #0]
 8003ae8:	6825      	ldr	r5, [r4, #0]
 8003aea:	1d18      	adds	r0, r3, #4
 8003aec:	6961      	ldr	r1, [r4, #20]
 8003aee:	6030      	str	r0, [r6, #0]
 8003af0:	062e      	lsls	r6, r5, #24
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	d501      	bpl.n	8003afa <_printf_i+0x1c2>
 8003af6:	6019      	str	r1, [r3, #0]
 8003af8:	e002      	b.n	8003b00 <_printf_i+0x1c8>
 8003afa:	0668      	lsls	r0, r5, #25
 8003afc:	d5fb      	bpl.n	8003af6 <_printf_i+0x1be>
 8003afe:	8019      	strh	r1, [r3, #0]
 8003b00:	2300      	movs	r3, #0
 8003b02:	4616      	mov	r6, r2
 8003b04:	6123      	str	r3, [r4, #16]
 8003b06:	e7bc      	b.n	8003a82 <_printf_i+0x14a>
 8003b08:	6833      	ldr	r3, [r6, #0]
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	1d1a      	adds	r2, r3, #4
 8003b0e:	6032      	str	r2, [r6, #0]
 8003b10:	681e      	ldr	r6, [r3, #0]
 8003b12:	6862      	ldr	r2, [r4, #4]
 8003b14:	4630      	mov	r0, r6
 8003b16:	f000 f849 	bl	8003bac <memchr>
 8003b1a:	b108      	cbz	r0, 8003b20 <_printf_i+0x1e8>
 8003b1c:	1b80      	subs	r0, r0, r6
 8003b1e:	6060      	str	r0, [r4, #4]
 8003b20:	6863      	ldr	r3, [r4, #4]
 8003b22:	6123      	str	r3, [r4, #16]
 8003b24:	2300      	movs	r3, #0
 8003b26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b2a:	e7aa      	b.n	8003a82 <_printf_i+0x14a>
 8003b2c:	4632      	mov	r2, r6
 8003b2e:	4649      	mov	r1, r9
 8003b30:	4640      	mov	r0, r8
 8003b32:	6923      	ldr	r3, [r4, #16]
 8003b34:	47d0      	blx	sl
 8003b36:	3001      	adds	r0, #1
 8003b38:	d0ad      	beq.n	8003a96 <_printf_i+0x15e>
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	079b      	lsls	r3, r3, #30
 8003b3e:	d413      	bmi.n	8003b68 <_printf_i+0x230>
 8003b40:	68e0      	ldr	r0, [r4, #12]
 8003b42:	9b03      	ldr	r3, [sp, #12]
 8003b44:	4298      	cmp	r0, r3
 8003b46:	bfb8      	it	lt
 8003b48:	4618      	movlt	r0, r3
 8003b4a:	e7a6      	b.n	8003a9a <_printf_i+0x162>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	4632      	mov	r2, r6
 8003b50:	4649      	mov	r1, r9
 8003b52:	4640      	mov	r0, r8
 8003b54:	47d0      	blx	sl
 8003b56:	3001      	adds	r0, #1
 8003b58:	d09d      	beq.n	8003a96 <_printf_i+0x15e>
 8003b5a:	3501      	adds	r5, #1
 8003b5c:	68e3      	ldr	r3, [r4, #12]
 8003b5e:	9903      	ldr	r1, [sp, #12]
 8003b60:	1a5b      	subs	r3, r3, r1
 8003b62:	42ab      	cmp	r3, r5
 8003b64:	dcf2      	bgt.n	8003b4c <_printf_i+0x214>
 8003b66:	e7eb      	b.n	8003b40 <_printf_i+0x208>
 8003b68:	2500      	movs	r5, #0
 8003b6a:	f104 0619 	add.w	r6, r4, #25
 8003b6e:	e7f5      	b.n	8003b5c <_printf_i+0x224>
 8003b70:	0800525f 	.word	0x0800525f
 8003b74:	08005270 	.word	0x08005270

08003b78 <memmove>:
 8003b78:	4288      	cmp	r0, r1
 8003b7a:	b510      	push	{r4, lr}
 8003b7c:	eb01 0402 	add.w	r4, r1, r2
 8003b80:	d902      	bls.n	8003b88 <memmove+0x10>
 8003b82:	4284      	cmp	r4, r0
 8003b84:	4623      	mov	r3, r4
 8003b86:	d807      	bhi.n	8003b98 <memmove+0x20>
 8003b88:	1e43      	subs	r3, r0, #1
 8003b8a:	42a1      	cmp	r1, r4
 8003b8c:	d008      	beq.n	8003ba0 <memmove+0x28>
 8003b8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b96:	e7f8      	b.n	8003b8a <memmove+0x12>
 8003b98:	4601      	mov	r1, r0
 8003b9a:	4402      	add	r2, r0
 8003b9c:	428a      	cmp	r2, r1
 8003b9e:	d100      	bne.n	8003ba2 <memmove+0x2a>
 8003ba0:	bd10      	pop	{r4, pc}
 8003ba2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ba6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003baa:	e7f7      	b.n	8003b9c <memmove+0x24>

08003bac <memchr>:
 8003bac:	4603      	mov	r3, r0
 8003bae:	b510      	push	{r4, lr}
 8003bb0:	b2c9      	uxtb	r1, r1
 8003bb2:	4402      	add	r2, r0
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	d101      	bne.n	8003bbe <memchr+0x12>
 8003bba:	2000      	movs	r0, #0
 8003bbc:	e003      	b.n	8003bc6 <memchr+0x1a>
 8003bbe:	7804      	ldrb	r4, [r0, #0]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	428c      	cmp	r4, r1
 8003bc4:	d1f6      	bne.n	8003bb4 <memchr+0x8>
 8003bc6:	bd10      	pop	{r4, pc}

08003bc8 <memcpy>:
 8003bc8:	440a      	add	r2, r1
 8003bca:	4291      	cmp	r1, r2
 8003bcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bd0:	d100      	bne.n	8003bd4 <memcpy+0xc>
 8003bd2:	4770      	bx	lr
 8003bd4:	b510      	push	{r4, lr}
 8003bd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bda:	4291      	cmp	r1, r2
 8003bdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003be0:	d1f9      	bne.n	8003bd6 <memcpy+0xe>
 8003be2:	bd10      	pop	{r4, pc}

08003be4 <_realloc_r>:
 8003be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003be8:	4680      	mov	r8, r0
 8003bea:	4615      	mov	r5, r2
 8003bec:	460c      	mov	r4, r1
 8003bee:	b921      	cbnz	r1, 8003bfa <_realloc_r+0x16>
 8003bf0:	4611      	mov	r1, r2
 8003bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bf6:	f7ff bb9d 	b.w	8003334 <_malloc_r>
 8003bfa:	b92a      	cbnz	r2, 8003c08 <_realloc_r+0x24>
 8003bfc:	f7ff fc8a 	bl	8003514 <_free_r>
 8003c00:	2400      	movs	r4, #0
 8003c02:	4620      	mov	r0, r4
 8003c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c08:	f000 f81a 	bl	8003c40 <_malloc_usable_size_r>
 8003c0c:	4285      	cmp	r5, r0
 8003c0e:	4606      	mov	r6, r0
 8003c10:	d802      	bhi.n	8003c18 <_realloc_r+0x34>
 8003c12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003c16:	d8f4      	bhi.n	8003c02 <_realloc_r+0x1e>
 8003c18:	4629      	mov	r1, r5
 8003c1a:	4640      	mov	r0, r8
 8003c1c:	f7ff fb8a 	bl	8003334 <_malloc_r>
 8003c20:	4607      	mov	r7, r0
 8003c22:	2800      	cmp	r0, #0
 8003c24:	d0ec      	beq.n	8003c00 <_realloc_r+0x1c>
 8003c26:	42b5      	cmp	r5, r6
 8003c28:	462a      	mov	r2, r5
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	bf28      	it	cs
 8003c2e:	4632      	movcs	r2, r6
 8003c30:	f7ff ffca 	bl	8003bc8 <memcpy>
 8003c34:	4621      	mov	r1, r4
 8003c36:	4640      	mov	r0, r8
 8003c38:	f7ff fc6c 	bl	8003514 <_free_r>
 8003c3c:	463c      	mov	r4, r7
 8003c3e:	e7e0      	b.n	8003c02 <_realloc_r+0x1e>

08003c40 <_malloc_usable_size_r>:
 8003c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c44:	1f18      	subs	r0, r3, #4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	bfbc      	itt	lt
 8003c4a:	580b      	ldrlt	r3, [r1, r0]
 8003c4c:	18c0      	addlt	r0, r0, r3
 8003c4e:	4770      	bx	lr

08003c50 <_init>:
 8003c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c52:	bf00      	nop
 8003c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c56:	bc08      	pop	{r3}
 8003c58:	469e      	mov	lr, r3
 8003c5a:	4770      	bx	lr

08003c5c <_fini>:
 8003c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5e:	bf00      	nop
 8003c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c62:	bc08      	pop	{r3}
 8003c64:	469e      	mov	lr, r3
 8003c66:	4770      	bx	lr
